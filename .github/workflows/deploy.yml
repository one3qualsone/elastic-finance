name: Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Create CORS-enabled host.json
        run: |
          echo '{
            "version": "2.0",
            "extensionBundle": {
              "id": "Microsoft.Azure.Functions.ExtensionBundle",
              "version": "[4.*, 5.0.0)"
            },
            "extensions": {
              "http": {
                "routePrefix": "",
                "cors": {
                  "allowedOrigins": [
                    "https://elasticfinancestorage.z6.web.core.windows.net",
                    "http://localhost:3000"
                  ],
                  "allowedMethods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
                  "allowedHeaders": ["Content-Type", "Authorization"],
                  "allowCredentials": true
                }
              }
            }
          }' > backend/host.json

      - name: Prepare backend for Azure Functions
        run: |         
          # Create function.json for HTTP trigger
          mkdir -p backend/api
          echo '{
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "methods": ["get", "post", "put", "delete", "options"],
                "route": "{*path}"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "res"
              }
            ]
          }' > backend/api/function.json
          
          # Create function entry point with better CORS handling
          echo 'const app = require("../src/index");
          
          module.exports = async function (context, req) {
            context.log("HTTP trigger function processed a request.");
            
            // Create Express-compatible request/response objects
            context.req.originalUrl = context.req.url || "/";
            context.req.path = context.req.params.path || "/";
            
            // Setup response callback
            const res = {
              status: function(status) {
                context.res = { status };
                return this;
              },
              send: function(body) {
                if (!context.res) context.res = {};
                context.res.body = body;
                return this;
              },
              json: function(body) {
                if (!context.res) context.res = {};
                context.res.headers = { 
                  "Content-Type": "application/json"
                };
                context.res.body = body;
                return this;
              },
              set: function(key, value) {
                if (!context.res) context.res = {};
                if (!context.res.headers) context.res.headers = {};
                context.res.headers[key] = value;
                return this;
              },
              end: function() {
                return this;
              }
            };
            
            // Handle preflight OPTIONS requests
            if (req.method === "OPTIONS") {
              context.res = {
                status: 204,
                headers: {
                  "Access-Control-Allow-Origin": "https://elasticfinancestorage.z6.web.core.windows.net",
                  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                  "Access-Control-Allow-Headers": "Content-Type, Authorization",
                  "Access-Control-Allow-Credentials": "true"
                }
              };
              return;
            }
            
            // Handle the request with Express app
            try {
              await new Promise((resolve, reject) => {
                app._router.handle(context.req, res, (err) => {
                  if (err) {
                    context.log.error("Express error:", err);
                    reject(err);
                  } else {
                    resolve();
                  }
                });
              });
              
              // Ensure CORS headers are set on successful responses
              if (!context.res.headers) context.res.headers = {};
              context.res.headers["Access-Control-Allow-Origin"] = "https://elasticfinancestorage.z6.web.core.windows.net";
              context.res.headers["Access-Control-Allow-Credentials"] = "true";
              
            } catch (error) {
              context.log.error("Error processing request:", error);
              context.res = {
                status: 500,
                headers: {
                  "Access-Control-Allow-Origin": "https://elasticfinancestorage.z6.web.core.windows.net",
                  "Access-Control-Allow-Credentials": "true"
                },
                body: {
                  error: "Internal Server Error",
                  message: error.message
                }
              };
            }
          };' > backend/api/index.js

      # Create corrected .env file without duplicate modules.export
      - name: Create env file
        run: |
          echo "PORT=4000" > backend/.env
          echo "NODE_ENV=production" >> backend/.env
          echo "CACHE_TTL=900" >> backend/.env
          echo "CORS_ORIGIN=https://elasticfinancestorage.z6.web.core.windows.net" >> backend/.env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> backend/.env

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy backend to Azure Functions
        uses: azure/functions-action@v1
        with:
          app-name: 'elastic-finance-api'
          package: 'backend'

      - name: Restart Function App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az functionapp restart --name elastic-finance-api --resource-group elastic-finance

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create images directory
        run: |
          mkdir -p frontend/public/images/learn

      - name: Generate placeholder images
        run: |
          cd frontend
          node scripts/setup-images.js

      - name: Update next.config.js for static export
        run: |
          cat > frontend/next.config.js << 'EOL'
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            reactStrictMode: true,
            swcMinify: true,
            
            // Set output to 'export' for static site generation
            output: 'export',
            
            // Configure image handling
            images: {
              unoptimized: true,
            },
            
            // Make sure PostCSS plugins are correctly applied
            webpack: (config) => {
              return config;
            },
          }
          
          module.exports = nextConfig
          EOL

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Update API URL
        run: |
          echo "NEXT_PUBLIC_API_URL=https://elastic-finance-api.azurewebsites.net/api" > frontend/.env.production

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Enable static website hosting
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob service-properties update \
              --account-name elasticfinancestorage \
              --account-key "${{ secrets.STORAGE_ACCOUNT_KEY }}" \
              --static-website \
              --index-document index.html \
              --404-document 404.html

      - name: Upload to storage account
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch \
              --account-name elasticfinancestorage \
              --account-key "${{ secrets.STORAGE_ACCOUNT_KEY }}" \
              --source frontend/out \
              --destination '$web' \
              --overwrite true
              
      - name: Output website URL
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Website URL: $(az storage account show -n elasticfinancestorage --query "primaryEndpoints.web" -o tsv)"