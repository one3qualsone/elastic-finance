

===== FILE: backend/Dockerfile =====

# backend/Dockerfile
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Install dependencies
COPY package.json ./
RUN npm install

# Copy application code
COPY . .

# Expose port
EXPOSE 4000

# Start the application
CMD ["npm", "start"]

===== FILE: backend/.env =====

# Backend .env file (backend/.env)
# Server Configuration
PORT=4000
NODE_ENV=production

# Cache Configuration (in seconds)
CACHE_TTL=900

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# Frontend .env file (frontend/.env)
# API Connection
NEXT_PUBLIC_API_URL=http://localhost:4000/api

OPENAI_API_KEY=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

===== FILE: backend/package.json =====

{
    "name": "elastic-finance-backend",
    "version": "1.0.0",
    "description": "Backend API for Elastic Finance",
    "main": "src/index.js",
    "scripts": {
      "start": "node src/index.js",
      "dev": "nodemon src/index.js",
      "test": "jest"
    },
    "dependencies": {
      "axios": "^1.6.3",
      "cors": "^2.8.5",
      "dotenv": "^16.3.1",
      "express": "^4.18.2",
      "express-rate-limit": "^7.1.5",
      "helmet": "^7.1.0",
      "morgan": "^1.10.0",
      "node-cache": "^5.1.2",
      "yahoo-finance2": "^2.9.1"
    },
    "devDependencies": {
      "jest": "^29.7.0",
      "nodemon": "^3.0.2",
      "supertest": "^6.3.3"
    }
  }

===== FILE: backend/src/config/index.js =====

const dotenv = require('dotenv');
const path = require('path');

// Load environment variables from .env file
dotenv.config({ path: path.resolve(__dirname, '../../.env') });

module.exports = {
  port: process.env.PORT || 4000,
  nodeEnv: process.env.NODE_ENV || 'development',
  cacheTtl: parseInt(process.env.CACHE_TTL || '900', 10),
  corsOrigin: process.env.CORS_ORIGIN || 'http://localhost:3000',
  docsPath: path.resolve(__dirname, '../../../docs')
};

===== FILE: backend/src/controllers/educationalController.js =====

const markdownService = require('../services/markdownService');

/**
 * Get a list of all available educational content
 */
exports.getContentList = async (req, res, next) => {
  try {
    const contentList = await markdownService.getContentList();
    res.json(contentList);
  } catch (error) {
    next(error);
  }
};

/**
 * Get educational content by slug
 */
exports.getContentBySlug = async (req, res, next) => {
  try {
    const { slug } = req.params;
    
    if (!slug) {
      return res.status(400).json({ error: 'Slug parameter is required' });
    }
    
    const content = await markdownService.getContentBySlug(slug);
    res.type('text/markdown').send(content);
  } catch (error) {
    if (error.message.includes('Content not found')) {
      return res.status(404).json({ error: 'Content not found' });
    }
    next(error);
  }
};

/**
 * Get educational content by filename
 */
exports.getContentByFilename = async (req, res, next) => {
  try {
    const { filename } = req.params;
    
    if (!filename) {
      return res.status(400).json({ error: 'Filename parameter is required' });
    }
    
    const content = await markdownService.getContentByFilename(filename);
    res.type('text/markdown').send(content);
  } catch (error) {
    if (error.message.includes('Failed to fetch content')) {
      return res.status(404).json({ error: 'Content not found' });
    }
    next(error);
  }
};



===== FILE: backend/src/controllers/financeController.js =====

const yahooFinanceService = require('../services/yahooFinanceService');
const enhancedLLMService = require('../services/enhancedLLMService');
// Add to backend/src/controllers/financeController.js
const llmService = require('../services/llmService');


/**
 * Get enhanced value investing analysis for a stock
 */
exports.getEnhancedValueAnalysis = async (req, res, next) => {
  try {
    const { symbol } = req.params;
    
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol parameter is required' });
    }
    
    // Fetch all necessary data in parallel
    const [overview, valueAnalysis, incomeStatement, balanceSheet, cashflowStatement] = await Promise.all([
      yahooFinanceService.getCompanyOverview(symbol),
      yahooFinanceService.getValueAnalysis(symbol),
      yahooFinanceService.getFinancials(symbol, 'income'),
      yahooFinanceService.getFinancials(symbol, 'balance'),
      yahooFinanceService.getFinancials(symbol, 'cashflow')
    ]);
    
    // Combine all data for the LLM service
    const stockData = {
      symbol,
      overview,
      valueAnalysis,
      financials: {
        income: incomeStatement,
        balance: balanceSheet,
        cashflow: cashflowStatement
      }
    };
    
    // Generate enhanced analysis
    const enhancedAnalysis = await enhancedLLMService.generateStockAnalysis(stockData);
    
    // Return combined result
    res.json({
      symbol,
      basicAnalysis: valueAnalysis,
      enhancedAnalysis
    });
  } catch (error) {
    console.error(`Error performing enhanced analysis for ${req.params.symbol}:`, error);
    next(error);
  }
};


/**
 * Get AI sentiment analysis for a stock
 */
exports.getAISentiment = async (req, res, next) => {
  try {
    const { symbol } = req.params;
    
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol parameter is required' });
    }
    
    // Get recent news articles (you'll need a news API here)
    // This is a placeholder - you'd use a real API like Alpha Vantage News API
    const newsItems = [
      { title: `${symbol} Reports Strong Quarterly Earnings`, date: new Date().toISOString() },
      { title: `Analysts Raise Price Target for ${symbol}`, date: new Date().toISOString() }
    ];
    
    const sentimentAnalysis = await llmService.analyzeNewsSentiment(symbol, newsItems);
    res.json(sentimentAnalysis);
  } catch (error) {
    next(error);
  }
};


/**
 * Search for companies by symbol or name
 */
exports.searchCompany = async (req, res, next) => {
  try {
    const { query } = req.query;
    
    if (!query) {
      return res.status(400).json({ error: 'Query parameter is required' });
    }
    
    const results = await yahooFinanceService.searchCompany(query);
    res.json(results);
  } catch (error) {
    next(error);
  }
};

/**
 * Get current quote for a stock symbol
 */
exports.getQuote = async (req, res, next) => {
  try {
    const { symbol } = req.params;
    
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol parameter is required' });
    }
    
    const quote = await yahooFinanceService.getQuote(symbol);
    res.json(quote);
  } catch (error) {
    next(error);
  }
};

/**
 * Get company overview for a stock symbol
 */
exports.getCompanyOverview = async (req, res, next) => {
  try {
    const { symbol } = req.params;
    
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol parameter is required' });
    }
    
    const overview = await yahooFinanceService.getCompanyOverview(symbol);
    res.json(overview);
  } catch (error) {
    next(error);
  }
};

/**
 * Get historical price data for a stock symbol
 */
exports.getHistoricalData = async (req, res, next) => {
  try {
    const { symbol } = req.params;
    const { period, range } = req.query;
    
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol parameter is required' });
    }
    
    const data = await yahooFinanceService.getHistoricalData(symbol, period, range);
    res.json(data);
  } catch (error) {
    next(error);
  }
};

/**
 * Get financial statements for a stock symbol
 */
exports.getFinancials = async (req, res, next) => {
  try {
    const { symbol } = req.params;
    const { type } = req.query || 'income';
    
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol parameter is required' });
    }
    
    const financials = await yahooFinanceService.getFinancials(symbol, type);
    res.json(financials);
  } catch (error) {
    next(error);
  }
};

/**
 * Get value investing analysis for a stock
 */
exports.getValueAnalysis = async (req, res, next) => {
  try {
    const { symbol } = req.params;
    
    if (!symbol) {
      return res.status(400).json({ error: 'Symbol parameter is required' });
    }
    
    const analysis = await yahooFinanceService.getValueAnalysis(symbol);
    res.json(analysis);
  } catch (error) {
    next(error);
  }
};

===== FILE: backend/src/index.js =====

// backend/src/index.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');
const config = require('./config');

// Import routes
const financeRoutes = require('./routes/finance');
const educationalRoutes = require('./routes/educational');

const app = express();
const PORT = config.port;

// Middleware
app.use(helmet()); // Security headers
app.use(cors({
  origin: config.corsOrigin
})); // Enable CORS for frontend
app.use(express.json()); // Parse JSON bodies
app.use(morgan('dev')); // Logging

// Rate limiting
const apiLimiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 30, // limit each IP to 30 requests per minute
  message: 'Too many requests, please try again later.'
});
app.use('/api/', apiLimiter);

// Routes
app.use('/api/finance', financeRoutes);
app.use('/api/educational-content', educationalRoutes);

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok' });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: 'Internal Server Error',
    message: config.nodeEnv === 'development' ? err.message : 'Something went wrong'
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Environment: ${config.nodeEnv}`);
});

module.exports = app; // For testing

===== FILE: backend/src/routes/educational.js =====

const express = require('express');
const router = express.Router();
const educationalController = require('../controllers/educationalController');

/**
 * @route GET /api/educational-content
 * @desc Get a list of all available educational content
 */
router.get('/', educationalController.getContentList);

/**
 * @route GET /api/educational-content/:slug
 * @desc Get educational content by slug
 */
router.get('/:slug', educationalController.getContentBySlug);

/**
 * @route GET /api/educational-content/file/:filename
 * @desc Get educational content by filename
 */
router.get('/file/:filename', educationalController.getContentByFilename);

module.exports = router;

===== FILE: backend/src/routes/finance.js =====


const express = require('express');
const router = express.Router();
const financeController = require('../controllers/financeController');

/**
 * @route GET /api/finance/search
 * @desc Search for a company by symbol or name
 */
router.get('/search', financeController.searchCompany);

/**
 * @route GET /api/finance/quote/:symbol
 * @desc Get current quote for a stock symbol
 */
router.get('/quote/:symbol', financeController.getQuote);

/**
 * @route GET /api/finance/overview/:symbol
 * @desc Get company overview for a stock symbol
 */
router.get('/overview/:symbol', financeController.getCompanyOverview);

/**
 * @route GET /api/finance/historical/:symbol
 * @desc Get historical price data for a stock symbol
 */
router.get('/historical/:symbol', financeController.getHistoricalData);

/**
 * @route GET /api/finance/financials/:symbol
 * @desc Get financial statements for a stock symbol
 */
router.get('/financials/:symbol', financeController.getFinancials);

/**
 * @route GET /api/finance/value-analysis/:symbol
 * @desc Get value investing analysis for a stock
 */
router.get('/value-analysis/:symbol', financeController.getValueAnalysis);


/**
 * @route GET /api/finance/sentiment/:symbol
 * @desc Get AI sentiment analysis for a stock
 */
router.get('/sentiment/:symbol', financeController.getAISentiment);


/**
 * @route GET /api/finance/enhanced-analysis/:symbol
 * @desc Get enhanced value investing analysis for a stock
 */
router.get('/enhanced-analysis/:symbol', financeController.getEnhancedValueAnalysis);

module.exports = router;

===== FILE: backend/src/services/enhancedLLMService.js =====

// backend/src/services/enhancedLLMService.js
const axios = require('axios');

// Configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const API_URL = 'https://api.openai.com/v1/chat/completions';

/**
 * Generate comprehensive stock analysis using LLM
 * @param {Object} stockData - Combined stock data
 * @returns {Promise<Object>} Detailed stock analysis
 */
const generateStockAnalysis = async (stockData) => {
  try {
    const { symbol, overview, financials, valueAnalysis } = stockData;
    
    // Format the raw API data into a structured JSON string
    const rawDataString = JSON.stringify({
      overview: overview,
      income: financials.income?.annualReports?.slice(0, 3) || [], // Last 3 years of income statements
      balance: financials.balance?.annualReports?.slice(0, 3) || [], // Last 3 years of balance sheets
      cashflow: financials.cashflow?.annualReports?.slice(0, 3) || [], // Last 3 years of cash flow statements
      valueAnalysis: valueAnalysis
    }, null, 2);
    
    // Create a simplified metrics summary for easier reference
    const metrics = {
      price: valueAnalysis?.currentPrice ? valueAnalysis.currentPrice.toFixed(2) : 'N/A', // Fix: Ensure price has 2 decimal places
      marketCap: formatCurrency(overview?.MarketCapitalization || 0),
      sector: overview?.Sector || 'N/A',
      industry: overview?.Industry || 'N/A'
    };
    
    // Create the LLM prompt with both the summary and raw data
    const prompt = `
    Analyze ${symbol} (${overview?.Name || symbol}) as a value investor using Warren Buffett's principles.
    
    BUFFETT'S PRINCIPLES:
    1. Stable, understandable business
    2. Long-term prospects
    3. Vigilant leadership
    4. Undervalued (margin of safety)
    
    ANALYZE THESE AREAS:
    1. BUSINESS OVERVIEW - What they do, moat, stability
    2. FINANCIAL STRENGTH - Debt position, capital allocation
    3. MANAGEMENT QUALITY - Leadership track record, shareholder-friendly practices
    4. PROFITABILITY - Revenue trends, margins, ROE (Buffett wants >15%)
    5. VALUATION - P/E (<15), P/B (<1.5), Combined Ratio (P/E×P/B <22.5), intrinsic value
    6. COMPETITIVE ANALYSIS - Industry position, threats, opportunities
    7. INVESTMENT CONCLUSION - Buy/Sell/Hold recommendation, fair value, upside/downside %
    
    REQUIRED SCORES:
    - Risk score (1-10, 1=minimal risk, 10=extreme risk)
    - Bullish/bearish score (1-10, 1=extremely bearish, 10=extremely bullish)
    
    BASIC INFO:
    - Symbol: ${symbol}
    - Current Price: $${metrics.price} (IMPORTANT: This price includes decimal points - for example, $165.10 means one hundred sixty-five dollars and ten cents, NOT one thousand six hundred fifty-one dollars)
    - Market Cap: ${metrics.marketCap}
    - Sector: ${metrics.sector}
    - Industry: ${metrics.industry}
    
    Provide specific numbers from financial data to support your analysis. Calculate the combined ratio (P/E×P/B) and state if it meets Buffett's criteria of <22.5.
    
    ALWAYS maintain decimal point accuracy in your calculations. For example, if a stock price is $165.10, the P/E ratio should be calculated using exactly $165.10, not $1651.
    `;
    
    // Make request to OpenAI API with the comprehensive data
    const response = await axios.post(
      API_URL,
      {
        model: "gpt-3.5-turbo-16k", // Use the 16k context version to handle all the raw data
        messages: [
          { role: "system", content: "You are an expert financial analyst specializing in value investing. You analyze financial data thoroughly and provide clear, data-driven insights. Always maintain numerical precision, especially with decimal points in financial figures." },
          { role: "user", content: prompt }
        ],
        temperature: 0.2,
        max_tokens: 4000  // Increased for more detailed analysis
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`
        }
      }
    );

    // Extract the LLM response
    const analysisText = response.data.choices[0].message.content;
    
    // Parse sections from the analysis
    const sections = extractSectionsFromAnalysis(analysisText);
    
    // Create a structured response with ALL the new fields
    const bullishScore = extractBullishScore(analysisText);
    const riskScore = extractRiskScore(analysisText);
    const fairValueEstimate = extractFairValue(analysisText, metrics.price);
    const recommendation = extractRecommendation(analysisText);
    const comprehensiveScore = calculateComprehensiveScore(stockData, bullishScore, riskScore, analysisText);

    return {
      summary: sections.find(s => s.title.includes("BUSINESS OVERVIEW"))?.content || 
              sections[0]?.content || 
              "Analysis summary not available.",
      sections: sections,
      fullAnalysis: analysisText,
      metrics: {
        bullishScore,
        riskScore,
        fairValueEstimate
      },
      overallRating: {
        score: comprehensiveScore,
        label: getBullishLabel(comprehensiveScore),
        recommendation: extractRecommendation(analysisText)
      },
      chartData: createChartData(stockData)
    };
  } catch (error) {
    console.error('Error generating stock analysis:', error);
    return {
      summary: `Unable to generate in-depth analysis for ${stockData?.symbol} at this time. Error: ${error.message}`,
      sections: [],
      fullAnalysis: "The analysis service is currently unavailable. Please try again later."
    };
  }
};

// Helper function to format currency values
function formatCurrency(value) {
  if (!value) return 'N/A';
  
  const num = parseFloat(value);
  if (isNaN(num)) return 'N/A';
  
  if (num >= 1000000000) {
    return `$${(num / 1000000000).toFixed(2)}B`;
  } else if (num >= 1000000) {
    return `$${(num / 1000000).toFixed(2)}M`;
  } else {
    return `$${num.toLocaleString()}`;
  }
}

// Extract fair value estimate - updated to handle decimal points correctly
function extractFairValue(text, currentPrice) {
  // Try different patterns to find the fair value
  const patterns = [
    /fair value[:\s]*\$([0-9]+\.[0-9]+)/i, // Requiring decimal point
    /intrinsic value[:\s]*\$([0-9]+\.[0-9]+)/i,
    /target price[:\s]*\$([0-9]+\.[0-9]+)/i,
    /price target[:\s]*\$([0-9]+\.[0-9]+)/i,
    /value of \$([0-9]+\.[0-9]+)/i,
    /estimate of \$([0-9]+\.[0-9]+)/i,
    /worth \$([0-9]+\.[0-9]+)/i,
    /valuation of \$([0-9]+\.[0-9]+)/i,
    /fair value.*?\$([0-9]+\.[0-9]+)/i,
    /\$([0-9]+\.[0-9]+) per share/i,
    /valued at \$([0-9]+\.[0-9]+)/i,
    // Fallback patterns for whole numbers
    /fair value[:\s]*\$([0-9]+)/i,
    /intrinsic value[:\s]*\$([0-9]+)/i,
    /target price[:\s]*\$([0-9]+)/i
  ];
  
  // Parse current price to ensure it's a number
  const currentPriceNum = parseFloat(currentPrice);
  
  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match) {
      const value = parseFloat(match[1]);
      // More strict validation to catch unreasonable values
      if (value > 0 && value < currentPriceNum * 3 && value > currentPriceNum * 0.3) {
        return value;
      }
    }
  }
  
  return null;
}

/* Rest of your existing functions... */

function extractSectionsFromAnalysis(text) {
  // Define section titles and possible variations
  const sectionMappings = {
    'BUSINESS OVERVIEW': ['BUSINESS OVERVIEW', 'COMPANY OVERVIEW', 'OVERVIEW', 'BUSINESS DESCRIPTION'],
    'FINANCIAL STRENGTH ANALYSIS': ['FINANCIAL STRENGTH', 'FINANCIAL STRENGTH ANALYSIS', 'FINANCIAL HEALTH', 'BALANCE SHEET ANALYSIS'],
    'MANAGEMENT QUALITY': ['MANAGEMENT QUALITY', 'MANAGEMENT ASSESSMENT', 'LEADERSHIP', 'MANAGEMENT TEAM'],
    'PROFITABILITY & EARNINGS ANALYSIS': ['PROFITABILITY', 'EARNINGS ANALYSIS', 'PROFITABILITY ANALYSIS', 'EARNINGS & PROFITABILITY'],
    'VALUATION ASSESSMENT': ['VALUATION', 'VALUATION ASSESSMENT', 'INTRINSIC VALUE', 'STOCK VALUATION'],
    'COMPETITIVE ANALYSIS': ['COMPETITIVE ANALYSIS', 'COMPETITION', 'INDUSTRY ANALYSIS', 'COMPETITIVE POSITION'],
    'INVESTMENT CONCLUSION': ['INVESTMENT CONCLUSION', 'CONCLUSION', 'RECOMMENDATION', 'INVESTMENT RECOMMENDATION']
  };
  
  // Flatten section titles for detection
  const allSectionPatterns = Object.values(sectionMappings).flat();
  
  const sections = [];
  let currentTitle = null;
  let currentContent = [];
  
  // Split by lines and process each line
  const lines = text.split('\n');
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    
    // Skip empty lines
    if (!line.trim()) continue;
    
    // Check if this line is a section title
    const isSectionHeader = allSectionPatterns.some(pattern => 
      line.toUpperCase().includes(pattern) || 
      line.match(new RegExp(`^\\d+\\.\\s*${pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}`, 'i'))
    );
    
    if (isSectionHeader) {
      // Save the previous section if we have one
      if (currentTitle && currentContent.length > 0) {
        sections.push({
          title: currentTitle,
          content: currentContent.join('\n').trim()
        });
      }
      
      // Start a new section
      currentTitle = line.trim();
      currentContent = [];
    } else if (currentTitle) {
      // Add to current section
      currentContent.push(line);
    } else if (line.trim() && sections.length === 0) {
      // This is likely the summary if no sections have been found yet
      sections.push({
        title: "Summary",
        content: line.trim()
      });
    }
  }
  
  // Add the last section
  if (currentTitle && currentContent.length > 0) {
    sections.push({
      title: currentTitle,
      content: currentContent.join('\n').trim()
    });
  }
  
  // Map sections to standardized titles
  const standardizedSections = sections.map(section => {
    const title = section.title.toUpperCase();
    
    // Find which standard section this belongs to
    for (const [standardTitle, patterns] of Object.entries(sectionMappings)) {
      if (patterns.some(pattern => title.includes(pattern) || 
          title.match(new RegExp(`^\\d+\\.\\s*${pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}`, 'i')))) {
        return {
          title: standardTitle,
          content: section.content
        };
      }
    }
    
    // Return original if no match
    return section;
  });
  
  // Ensure all required sections exist, using a smarter approach to find similar content
  const requiredTitles = Object.keys(sectionMappings);
  for (const requiredTitle of requiredTitles) {
    if (!standardizedSections.some(section => section.title === requiredTitle)) {
      // Try to find content that might belong to this section
      const potentialContent = findPotentialSectionContent(text, requiredTitle);
      
      standardizedSections.push({
        title: requiredTitle,
        content: potentialContent || "Information not available for this section."
      });
    }
  }
  
  return standardizedSections;
}

function findPotentialSectionContent(text, sectionType) {
  // Keywords that might indicate content for each section type
  const sectionKeywords = {
    'BUSINESS OVERVIEW': ['business model', 'company operates', 'what they do', 'operations', 'products', 'services'],
    'FINANCIAL STRENGTH ANALYSIS': ['debt-to-equity', 'balance sheet', 'debt', 'liquidity', 'solvency', 'cash position'],
    'MANAGEMENT QUALITY': ['management team', 'CEO', 'leadership', 'executives', 'board', 'management decisions'],
    'PROFITABILITY & EARNINGS ANALYSIS': ['revenue', 'profit margin', 'earnings growth', 'EPS', 'income', 'profitability'],
    'VALUATION ASSESSMENT': ['intrinsic value', 'P/E ratio', 'P/B ratio', 'undervalued', 'overvalued', 'fair value'],
    'COMPETITIVE ANALYSIS': ['competitors', 'market share', 'industry position', 'competitive advantage', 'moat'],
    'INVESTMENT CONCLUSION': ['recommendation', 'buy', 'sell', 'hold', 'investment thesis', 'conclusion']
  };
  
  const keywords = sectionKeywords[sectionType] || [];
  
  // Try to find paragraphs containing these keywords
  for (const keyword of keywords) {
    const pattern = new RegExp(`[^.!?]*\\b${keyword}\\b[^.!?]*[.!?]`, 'gi');
    const matches = text.match(pattern);
    
    if (matches && matches.length > 0) {
      return matches.slice(0, 3).join(' ');
    }
  }
  
  return null;
}

function extractBullishScore(text) {
  // Try different patterns to find the score
  const patterns = [
    /bullish\/bearish score[:\s]*([0-9]|10)\/10/i,
    /bullish score[:\s]*([0-9]|10)\/10/i,
    /bullish rating[:\s]*([0-9]|10)\/10/i,
    /investment score[:\s]*([0-9]|10)\/10/i,
    /score of ([0-9]|10) out of 10/i,
    /([0-9]|10)\/10 on the bullish/i,
    /I would rate this stock a ([0-9]|10)\/10/i,
    /score.*?([0-9]|10)\/10/i
  ];
  
  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match) {
      return parseInt(match[1]);
    }
  }
  
  return null;
}

function extractRiskScore(text) {
  // Try different patterns to find the risk score
  const patterns = [
    /risk score[:\s]*([0-9]|10)\/10/i,
    /risk assessment[:\s]*([0-9]|10)\/10/i,
    /risk rating[:\s]*([0-9]|10)\/10/i,
    /risk level[:\s]*([0-9]|10)\/10/i,
    /risk.*?([0-9]|10)\/10/i,
    /([0-9]|10)\/10 on the risk/i,
    /I would rate the risk as ([0-9]|10)\/10/i
  ];
  
  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match) {
      return parseInt(match[1]);
    }
  }
  
  // Look for a section with "RISK ASSESSMENT" and try to find a score there
  const riskSection = text.match(/RISK ASSESSMENT.*?(\d+)\.?\s/i);
  if (riskSection && riskSection[1]) {
    const score = parseInt(riskSection[1]);
    if (score >= 1 && score <= 10) {
      return score;
    }
  }
  
  // Look for a section with "INVESTMENT CONCLUSION" and try to find a score there
  const conclusionSection = text.match(/INVESTMENT CONCLUSION.*?(\d+)\.?\s/i);
  if (conclusionSection && conclusionSection[1]) {
    const score = parseInt(conclusionSection[1]);
    if (score >= 1 && score <= 10) {
      return score;
    }
  }
  
  return null;
}

function getBullishLabel(score) {
  if (!score) return "Neutral";
  if (score >= 8) return "Strongly Bullish";
  if (score >= 6) return "Moderately Bullish";
  if (score === 5) return "Neutral";
  if (score >= 3) return "Moderately Bearish";
  return "Strongly Bearish";
}

function extractRecommendation(text) {
  // Check first if the LLM expresses uncertainty about making a recommendation
  const uncertaintyPatterns = [
    /difficult to provide.*recommendation/i,
    /cannot make.*definitive recommendation/i,
    /insufficient.*to make.*recommendation/i,
    /without.*metrics.*difficult to/i,
    /would need more.*to provide/i,
    /cannot determine.*recommendation/i
  ];
  
  for (const pattern of uncertaintyPatterns) {
    if (pattern.test(text)) {
      // If uncertainty is expressed, return "Neutral" instead of guessing
      return "Neutral";
    }
  }
  
  // If no uncertainty expressed, proceed with normal recommendation extraction
  const buyPattern = /\b(buy|strong buy|accumulate)\b/i;
  const sellPattern = /\b(sell|strong sell|reduce)\b/i;
  const holdPattern = /\b(hold|neutral|maintain)\b/i;
  
  // Look in the conclusion section for recommendations
  const conclusionSection = text.match(/INVESTMENT CONCLUSION.*?\n\n/is);
  if (conclusionSection) {
    const conclusionText = conclusionSection[0];
    
    if (buyPattern.test(conclusionText)) return "Buy";
    if (sellPattern.test(conclusionText)) return "Sell";
    if (holdPattern.test(conclusionText)) return "Hold";
  }
  
  // Look in the entire text if not found in conclusion
  if (buyPattern.test(text)) return "Buy";
  if (sellPattern.test(text)) return "Sell";
  if (holdPattern.test(text)) return "Hold";
  
  // Default based on bullish score if no explicit recommendation
  const bullishScore = extractBullishScore(text);
  if (bullishScore >= 7) return "Buy";
  if (bullishScore <= 3) return "Sell";
  return "Hold";
}

function calculateComprehensiveScore(stockData, bullishScore, riskScore, analysisText) {
  // Check for uncertainty in the analysis text
  const uncertaintyPatterns = [
    /difficult to provide.*recommendation/i,
    /cannot make.*definitive recommendation/i,
    /insufficient.*to make.*recommendation/i,
    /without.*metrics.*difficult to/i,
    /would need more.*to provide/i,
    /cannot determine.*recommendation/i,
    /difficult to assess/i
  ];
  
  // If uncertainty is expressed and no bullish score provided, default to neutral (5)
  for (const pattern of uncertaintyPatterns) {
    if (pattern.test(analysisText) && !bullishScore) {
      return 5; // Neutral score when uncertain
    }
  }
  
  // Default to the bullish score if provided and no uncertainty
  if (bullishScore) {
    return bullishScore;
  }
  
  // If no bullish score, calculate based on metrics
  if (!stockData || !stockData.valueAnalysis || !stockData.valueAnalysis.metrics) {
    return 5; // Default to neutral if no data
  }
  
  const metrics = stockData.valueAnalysis.metrics;
  let score = 5; // Start neutral
  
  // PE ratio (lower is better)
  if (metrics.pe) {
    if (metrics.pe < 10) score += 1;
    else if (metrics.pe < 15) score += 0.5;
    else if (metrics.pe > 25) score -= 1;
  }
  
  // P/B ratio (lower is better)
  if (metrics.pb) {
    if (metrics.pb < 1) score += 1;
    else if (metrics.pb < 1.5) score += 0.5;
    else if (metrics.pb > 3) score -= 1;
  }
  
  // ROE (higher is better)
  if (metrics.roe) {
    if (metrics.roe > 0.2) score += 1;
    else if (metrics.roe > 0.15) score += 0.5;
    else if (metrics.roe < 0.05) score -= 0.5;
  }
  
  // Debt to Equity (lower is better)
  if (metrics.debtToEquity) {
    if (metrics.debtToEquity < 0.3) score += 1;
    else if (metrics.debtToEquity < 0.5) score += 0.5;
    else if (metrics.debtToEquity > 1.5) score -= 1;
  }
  
  // Undervalued or overvalued based on intrinsic value
  if (stockData.valueAnalysis.currentPrice && stockData.valueAnalysis.intrinsicValue) {
    const ratio = stockData.valueAnalysis.currentPrice / stockData.valueAnalysis.intrinsicValue;
    if (ratio < 0.8) score += 1.5; // Significantly undervalued
    else if (ratio < 0.9) score += 1; // Moderately undervalued
    else if (ratio > 1.2) score -= 1.5; // Significantly overvalued
    else if (ratio > 1.1) score -= 1; // Moderately overvalued
  }
  
  // Risk score adjustment (invert risk - higher risk = lower score)
  if (riskScore) {
    score -= (riskScore - 5) * 0.2; // Adjust score down for high risk
  }
  
  // Ensure score stays within bounds
  return Math.min(Math.max(Math.round(score * 10) / 10, 1), 10);
}

function createChartData(stockData) {
  const charts = [];
  
  // 1. Value Metrics Chart (for radar or bar chart)
  if (stockData.valueAnalysis && stockData.valueAnalysis.metrics) {
    const metrics = stockData.valueAnalysis.metrics;
    
    // Calculate combined P/E * P/B (Graham-Buffett ratio)
    const combinedRatio = metrics.pe && metrics.pb ? 
      (metrics.pe * metrics.pb).toFixed(1) : null;
    
    charts.push({
      type: 'ValueMetrics',
      title: 'Value Investing Metrics',
      description: 'Key metrics compared to Buffett\'s criteria',
      data: [
        { 
          name: 'P/E Ratio', 
          value: metrics.pe || 0, 
          benchmark: 15, 
          status: metrics.pe < 15 ? 'good' : metrics.pe < 25 ? 'neutral' : 'poor'
        },
        { 
          name: 'P/B Ratio', 
          value: metrics.pb || 0, 
          benchmark: 1.5, 
          status: metrics.pb < 1.5 ? 'good' : metrics.pb < 3 ? 'neutral' : 'poor'
        },
        { 
          name: 'ROE (%)', 
          value: metrics.roe ? (metrics.roe * 100).toFixed(1) : 0, 
          benchmark: 15, 
          status: metrics.roe > 0.15 ? 'good' : metrics.roe > 0.10 ? 'neutral' : 'poor'
        },
        { 
          name: 'Debt/Equity', 
          value: metrics.debtToEquity || 0, 
          benchmark: 0.5, 
          status: metrics.debtToEquity < 0.5 ? 'good' : metrics.debtToEquity < 1 ? 'neutral' : 'poor'
        },
        { 
          name: 'P/E × P/B', 
          value: combinedRatio || 0, 
          benchmark: 22.5, 
          status: combinedRatio < 22.5 ? 'good' : combinedRatio < 30 ? 'neutral' : 'poor'
        }
      ]
    });
  }
  
  // 2. Financial Performance Chart (for line or bar chart)
  if (stockData.financials && stockData.financials.income && 
      stockData.financials.income.annualReports && 
      stockData.financials.income.annualReports.length > 0) {
    
    // Get up to 5 years of income reports, in chronological order
    const incomeReports = stockData.financials.income.annualReports
      .slice(0, 5)
      .sort((a, b) => new Date(a.fiscalDateEnding) - new Date(b.fiscalDateEnding));
    
    const labels = incomeReports.map(report => {
      const date = new Date(report.fiscalDateEnding);
      return date.getFullYear().toString();
    });
    
    // Convert to millions and handle parsing errors
    const revenueData = incomeReports.map(report => {
      const val = parseFloat(report.totalRevenue || 0);
      return isNaN(val) ? 0 : (val / 1000000).toFixed(1);
    });
    
    const netIncomeData = incomeReports.map(report => {
      const val = parseFloat(report.netIncome || 0);
      return isNaN(val) ? 0 : (val / 1000000).toFixed(1);
    });
    
    charts.push({
      type: 'FinancialPerformance',
      title: 'Financial Performance (Millions $)',
      labels: labels,
      datasets: [
        { name: 'Revenue', data: revenueData, color: '#4299e1' },
        { name: 'Net Income', data: netIncomeData, color: '#48bb78' }
      ]
    });
  }
  
  // 3. Intrinsic Value vs Current Price (for gauge or comparison chart)
  if (stockData.valueAnalysis) {
    const currentPrice = stockData.valueAnalysis.currentPrice || 0;
    const intrinsicValue = stockData.valueAnalysis.intrinsicValue || 0;
    
    if (currentPrice && intrinsicValue) {
      const margin = ((intrinsicValue - currentPrice) / currentPrice * 100).toFixed(1);
      const status = margin > 20 ? 'undervalued' : 
                    margin < -20 ? 'overvalued' : 'fair-value';
      
      charts.push({
        type: 'ValueComparison',
        title: 'Price vs Intrinsic Value',
        data: {
          currentPrice,
          intrinsicValue,
          marginOfSafety: margin,
          status
        }
      });
    }
  }
  
  return charts;
}

// Make sure to export the function!
module.exports = {
  generateStockAnalysis
};

===== FILE: backend/src/services/financeService.js =====

const axios = require('axios');

// Configure API client
const apiClient = axios.create({
  baseURL: process.env.FINANCE_API_URL || 'https://www.alphavantage.co/query',
  timeout: 10000,
  params: {
    apikey: process.env.FINANCE_API_KEY
  }
});

/**
 * Search for companies by symbol or name
 */
exports.searchCompany = async (query) => {
  try {
    const response = await apiClient.get('', {
      params: {
        function: 'SYMBOL_SEARCH',
        keywords: query
      }
    });
    
    if (response.data.bestMatches) {
      return response.data.bestMatches;
    }
    
    return [];
  } catch (error) {
    console.error('Error searching for company:', error);
    throw new Error('Failed to search for company');
  }
};

/**
 * Get current stock quote
 */
exports.getQuote = async (symbol) => {
  try {
    const response = await apiClient.get('', {
      params: {
        function: 'GLOBAL_QUOTE',
        symbol
      }
    });
    
    if (response.data['Global Quote']) {
      return response.data['Global Quote'];
    }
    
    throw new Error('Quote data not found');
  } catch (error) {
    console.error(`Error fetching quote for ${symbol}:`, error);
    throw new Error(`Failed to fetch quote for ${symbol}`);
  }
};

/**
 * Get company overview
 */
exports.getCompanyOverview = async (symbol) => {
  try {
    const response = await apiClient.get('', {
      params: {
        function: 'OVERVIEW',
        symbol
      }
    });
    
    if (response.data && response.data.Symbol) {
      return response.data;
    }
    
    throw new Error('Company overview not found');
  } catch (error) {
    console.error(`Error fetching overview for ${symbol}:`, error);
    throw new Error(`Failed to fetch overview for ${symbol}`);
  }
};

/**
 * Get financial statements
 */
exports.getFinancials = async (symbol, type = 'income') => {
  let functionName;
  
  switch (type) {
    case 'income':
      functionName = 'INCOME_STATEMENT';
      break;
    case 'balance':
      functionName = 'BALANCE_SHEET';
      break;
    case 'cashflow':
      functionName = 'CASH_FLOW';
      break;
    default:
      functionName = 'INCOME_STATEMENT';
  }
  
  try {
    const response = await apiClient.get('', {
      params: {
        function: functionName,
        symbol
      }
    });
    
    if (response.data && (response.data.annualReports || response.data.quarterlyReports)) {
      return response.data;
    }
    
    throw new Error('Financial data not found');
  } catch (error) {
    console.error(`Error fetching ${type} statement for ${symbol}:`, error);
    throw new Error(`Failed to fetch ${type} statement for ${symbol}`);
  }
};

/**
 * Calculate value investing metrics and provide analysis
 */
exports.getValueAnalysis = async (symbol) => {
  try {
    // Get necessary data for analysis
    const [overview, incomeStatement, balanceSheet] = await Promise.all([
      this.getCompanyOverview(symbol),
      this.getFinancials(symbol, 'income'),
      this.getFinancials(symbol, 'balance')
    ]);
    
    // Extract key metrics
    const currentPrice = parseFloat(overview.Price);
    const eps = parseFloat(overview.EPS);
    const bookValue = parseFloat(overview.BookValue);
    const pe = parseFloat(overview.PERatio);
    const pb = parseFloat(overview.PriceToBookRatio);
    const roe = parseFloat(overview.ReturnOnEquityTTM);
    
    // Calculate value metrics
    const valueScore = calculateValueScore(currentPrice, eps, bookValue, pe, pb, roe);
    const intrinsicValue = calculateIntrinsicValue(eps, bookValue, roe);
    
    // Generate analysis text
    const analysis = generateAnalysis(valueScore, currentPrice, intrinsicValue, pe, pb, roe);
    
    return {
      symbol,
      currentPrice,
      intrinsicValue,
      valueScore,
      metrics: {
        eps,
        bookValue,
        pe,
        pb,
        roe
      },
      analysis
    };
  } catch (error) {
    console.error(`Error performing value analysis for ${symbol}:`, error);
    throw new Error(`Failed to perform value analysis for ${symbol}`);
  }
};

/**
 * Calculate a value score (1-10) based on value investing principles
 */
function calculateValueScore(price, eps, bookValue, pe, pb, roe) {
  // Initialize score components
  let peScore = 0;
  let pbScore = 0;
  let roeScore = 0;
  
  // PE ratio scoring (lower is better for value investing)
  if (pe <= 0) {
    peScore = 0; // Negative earnings
  } else if (pe < 10) {
    peScore = 4; // Excellent PE
  } else if (pe < 15) {
    peScore = 3; // Good PE
  } else if (pe < 20) {
    peScore = 2; // Average PE
  } else if (pe < 25) {
    peScore = 1; // Below average PE
  } else {
    peScore = 0; // Poor PE
  }
  
  // P/B ratio scoring (lower is better for value investing)
  if (pb <= 0) {
    pbScore = 0; // Invalid book value
  } else if (pb < 1) {
    pbScore = 4; // Excellent P/B
  } else if (pb < 2) {
    pbScore = 3; // Good P/B
  } else if (pb < 3) {
    pbScore = 2; // Average P/B
  } else if (pb < 4) {
    pbScore = 1; // Below average P/B
  } else {
    pbScore = 0; // Poor P/B
  }
  
  // ROE scoring (higher is better)
  if (roe <= 0) {
    roeScore = 0; // Negative ROE
  } else if (roe > 20) {
    roeScore = 2; // Excellent ROE
  } else if (roe > 15) {
    roeScore = 1.5; // Good ROE
  } else if (roe > 10) {
    roeScore = 1; // Average ROE
  } else {
    roeScore = 0.5; // Below average ROE
  }
  
  // Calculate total score (1-10 scale)
  const totalScore = peScore + pbScore + roeScore;
  
  // Scale to 1-10
  return Math.min(Math.max(Math.round(totalScore * 10 / 10), 1), 10);
}

/**
 * Calculate intrinsic value using a simplified model
 */
function calculateIntrinsicValue(eps, bookValue, roe) {
  if (eps <= 0 || bookValue <= 0 || roe <= 0) {
    return null; // Cannot calculate with negative/zero values
  }
  
  // Simple Graham formula for intrinsic value
  const growthRate = Math.min(roe * 0.5, 0.15); // Cap growth at 15%
  return (eps * (8.5 + 2 * growthRate * 100)).toFixed(2);
}

/**
 * Generate analysis text based on metrics
 */
function generateAnalysis(valueScore, currentPrice, intrinsicValue, pe, pb, roe) {
  let analysis = "";
  
  // Interpret value score
  if (valueScore >= 8) {
    analysis += "Strong value opportunity. ";
  } else if (valueScore >= 6) {
    analysis += "Moderate value opportunity. ";
  } else if (valueScore >= 4) {
    analysis += "Fair value. ";
  } else {
    analysis += "Weak value proposition. ";
  }
  
  // Add price vs intrinsic value analysis
  if (intrinsicValue && currentPrice < intrinsicValue * 0.8) {
    analysis += `Trading significantly below estimated intrinsic value ($${intrinsicValue}). `;
  } else if (intrinsicValue && currentPrice < intrinsicValue) {
    analysis += `Trading below estimated intrinsic value ($${intrinsicValue}). `;
  } else if (intrinsicValue && currentPrice < intrinsicValue * 1.2) {
    analysis += `Trading near estimated intrinsic value ($${intrinsicValue}). `;
  } else if (intrinsicValue) {
    analysis += `Trading above estimated intrinsic value ($${intrinsicValue}). `;
  }
  
  // Add PE analysis
  if (pe <= 0) {
    analysis += "Negative earnings. ";
  } else if (pe < 10) {
    analysis += "PE ratio indicates potential undervaluation. ";
  } else if (pe > 25) {
    analysis += "PE ratio indicates potential overvaluation. ";
  } else {
    analysis += "PE ratio is within reasonable range. ";
  }
  
  // Add ROE analysis
  if (roe > 15) {
    analysis += "Strong return on equity indicates effective management.";
  } else if (roe > 10) {
    analysis += "Decent return on equity.";
  } else if (roe > 0) {
    analysis += "Below-average return on equity.";
  } else {
    analysis += "Negative return on equity is concerning.";
  }
  
  return analysis;
}

===== FILE: backend/src/services/llmService.js =====

// backend/src/services/llmService.js
const axios = require('axios');

// Configuration
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const API_URL = 'https://api.openai.com/v1/chat/completions';

/**
 * Analyze news sentiment for a stock
 * @param {string} symbol - Stock symbol
 * @param {Array} newsItems - Recent news articles about the stock
 * @returns {Promise<Object>} Sentiment analysis and score
 */
const analyzeNewsSentiment = async (symbol, newsItems) => {
  try {
    // Prepare news content for analysis
    const newsContent = newsItems
      .map(item => `Title: ${item.title}\nDate: ${item.date}\n`)
      .join('\n');
    
    // Create prompt for the LLM
    const prompt = `
You are a financial analyst expert in stock market sentiment analysis.
Please analyze the sentiment in these recent news articles about ${symbol}:

${newsContent}

Provide an analysis of the overall sentiment toward ${symbol} based on these articles.
Rate the sentiment on a scale of 1-10 where:
1-3: Bearish (negative)
4-6: Neutral
7-10: Bullish (positive)

Format your response as a JSON object with these fields:
- sentiment_score: [number between 1-10]
- analysis: [concise analysis of the sentiment in 2-3 sentences]
- key_factors: [array of up to 3 key factors affecting sentiment]
    `;

    // Make request to OpenAI API
    const response = await axios.post(
      API_URL,
      {
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: "You are a financial analyst expert who provides objective analysis in JSON format only." },
          { role: "user", content: prompt }
        ],
        temperature: 0.3, // Low temperature for more consistent responses
        response_format: { type: "json_object" }
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`
        }
      }
    );

    // Parse the response
    const content = response.data.choices[0].message.content;
    return JSON.parse(content);
  } catch (error) {
    console.error('Error analyzing news sentiment:', error);
    // Return default neutral sentiment if there's an error
    return {
      sentiment_score: 5,
      analysis: "Unable to analyze sentiment due to an error.",
      key_factors: ["Error in analysis"]
    };
  }
};

module.exports = {
  analyzeNewsSentiment
};

===== FILE: backend/src/services/markdownService.js =====

// backend/src/services/markdownService.js
const fs = require('fs').promises;
const path = require('path');
const config = require('../config');

// Path to the educational content files
const CONTENT_PATH = path.join(config.docsPath, 'educational');

/**
 * Get a list of all available educational content files
 * @returns {Promise<Array>} List of available content files
 */
const getContentList = async () => {
  try {
    const files = await fs.readdir(CONTENT_PATH);
    
    // Filter and format the content list
    const contentList = files
      .filter(file => file.endsWith('.md'))
      .map(file => {
        const slug = file
          .replace('.md', '')
          .replace(/\s+/g, '-')
          .replace(/[^a-zA-Z0-9-]/g, '')
          .toLowerCase();
        
        return {
          slug,
          filename: file,
          title: file.replace('.md', '').replace(/-/g, ' ')
        };
      });
    
    return contentList;
  } catch (error) {
    console.error('Error reading content directory:', error);
    throw new Error('Failed to get content list');
  }
};

/**
 * Get content of a markdown file by slug
 * @param {string} slug - Slug identifier for the content
 * @returns {Promise<string>} Content of the markdown file
 */
const getContentBySlug = async (slug) => {
  try {
    // Get content map
    const contentList = await getContentList();
    const contentItem = contentList.find(item => item.slug === slug);
    
    if (!contentItem) {
      throw new Error(`Content not found for slug: ${slug}`);
    }
    
    // Read the markdown file
    const filePath = path.join(CONTENT_PATH, contentItem.filename);
    const content = await fs.readFile(filePath, 'utf-8');
    
    return content;
  } catch (error) {
    console.error(`Error fetching content for ${slug}:`, error);
    throw new Error(`Failed to fetch content for ${slug}`);
  }
};

/**
 * Get content of a markdown file by filename
 * @param {string} filename - Filename of the markdown file
 * @returns {Promise<string>} Content of the markdown file
 */
const getContentByFilename = async (filename) => {
  try {
    // Read the markdown file
    const filePath = path.join(CONTENT_PATH, filename);
    const content = await fs.readFile(filePath, 'utf-8');
    
    return content;
  } catch (error) {
    console.error(`Error fetching content for ${filename}:`, error);
    throw new Error(`Failed to fetch content for ${filename}`);
  }
};

module.exports = {
  getContentList,
  getContentBySlug,
  getContentByFilename
};

===== FILE: backend/src/services/yahooFinanceService.js =====

// backend/src/services/yahooFinanceService.js
const yahooFinance = require('yahoo-finance2').default;
const NodeCache = require('node-cache');
const config = require('../config');

// Setup cache with configurable TTL (time to live)
const cache = new NodeCache({ stdTTL: config.cacheTtl });

/**
 * Search for companies by symbol or name
 * @param {string} query - Search query
 * @returns {Promise<Array>} List of matching companies
 */
const searchCompany = async (query) => {
  const cacheKey = `search_${query}`;
  
  // Check cache first
  const cachedData = cache.get(cacheKey);
  if (cachedData) {
    return cachedData;
  }

  try {
    const results = await yahooFinance.search(query);
    
    if (results && results.quotes) {
      const formattedResults = results.quotes.map(quote => ({
        symbol: quote.symbol,
        name: quote.shortname || quote.longname || '',
        type: quote.quoteType || '',
        exchange: quote.exchange || ''
      }));
      
      // Cache results
      cache.set(cacheKey, formattedResults);
      
      return formattedResults;
    }
    
    return [];
  } catch (error) {
    console.error('Error searching for company:', error);
    throw new Error('Failed to search for company');
  }
};

/**
 * Get current stock quote
 * @param {string} symbol - Stock symbol
 * @returns {Promise<Object>} Quote data
 */
const getQuote = async (symbol) => {
  const cacheKey = `quote_${symbol}`;
  
  // Check cache first
  const cachedData = cache.get(cacheKey);
  if (cachedData) {
    return cachedData;
  }

  try {
    const quote = await yahooFinance.quote(symbol);
    
    // Format the data to match our API structure
    const formattedQuote = {
      symbol: quote.symbol,
      price: quote.regularMarketPrice || 0,
      change: quote.regularMarketChange || 0,
      changePercent: quote.regularMarketChangePercent || 0,
      open: quote.regularMarketOpen || 0,
      high: quote.regularMarketDayHigh || 0,
      low: quote.regularMarketDayLow || 0,
      volume: quote.regularMarketVolume || 0,
      latestTradingDay: quote.regularMarketTime ? new Date(quote.regularMarketTime * 1000).toISOString() : null,
      previousClose: quote.regularMarketPreviousClose || 0
    };
    
    // Cache results
    cache.set(cacheKey, formattedQuote);
    
    return formattedQuote;
  } catch (error) {
    console.error(`Error fetching quote for ${symbol}:`, error);
    throw new Error(`Failed to fetch quote for ${symbol}`);
  }
};

/**
 * Get company overview
 * @param {string} symbol - Stock symbol
 * @returns {Promise<Object>} Company overview data
 */
const getCompanyOverview = async (symbol) => {
  const cacheKey = `overview_${symbol}`;
  
  // Check cache first
  const cachedData = cache.get(cacheKey);
  if (cachedData) {
    return cachedData;
  }

  try {
    // Get quote for basic info
    const quote = await yahooFinance.quote(symbol);
    
    // Get more detailed data
    const quoteSummary = await yahooFinance.quoteSummary(symbol, {
      modules: ['summaryProfile', 'summaryDetail', 'financialData', 'defaultKeyStatistics']
    });
    
    // Extract data from different modules (safely)
    const summaryProfile = quoteSummary.summaryProfile || {};
    const summaryDetail = quoteSummary.summaryDetail || {};
    const financialData = quoteSummary.financialData || {};
    const defaultKeyStatistics = quoteSummary.defaultKeyStatistics || {};
    
    // Format the data to match our API structure
    const formattedOverview = {
      Symbol: quote.symbol || '',
      AssetType: quote.quoteType || '',
      Name: quote.shortname || quote.longname || '',
      Description: summaryProfile.longBusinessSummary || '',
      Exchange: quote.exchange || '',
      Currency: quote.currency || 'USD',
      Country: summaryProfile.country || '',
      Sector: summaryProfile.sector || '',
      Industry: summaryProfile.industry || '',
      FiscalYearEnd: defaultKeyStatistics.lastFiscalYearEnd 
        ? new Date(defaultKeyStatistics.lastFiscalYearEnd * 1000).toLocaleDateString('en-US', { month: 'long' }) 
        : 'December',
      LatestQuarter: defaultKeyStatistics.mostRecentQuarter 
        ? new Date(defaultKeyStatistics.mostRecentQuarter * 1000).toISOString().split('T')[0] 
        : '',
      MarketCapitalization: quote.marketCap || 0,
      EBITDA: financialData.ebitda || 0,
      PERatio: quote.trailingPE || summaryDetail.trailingPE || null,
      PEGRatio: defaultKeyStatistics.pegRatio || null,
      BookValue: defaultKeyStatistics.bookValue || null,
      DividendPerShare: defaultKeyStatistics.lastDividendValue || 0,
      DividendYield: summaryDetail.dividendYield ? summaryDetail.dividendYield : 0,
      EPS: defaultKeyStatistics.trailingEps || null,
      RevenuePerShareTTM: defaultKeyStatistics.revenuePerShare || null,
      ProfitMargin: financialData.profitMargins || null,
      OperatingMarginTTM: financialData.operatingMargins || null,
      ReturnOnAssetsTTM: financialData.returnOnAssets || null,
      ReturnOnEquityTTM: financialData.returnOnEquity || null,
      RevenueTTM: financialData.totalRevenue || null,
      GrossProfitTTM: financialData.grossProfits || null,
      DilutedEPSTTM: defaultKeyStatistics.trailingEps || null,
      QuarterlyEarningsGrowthYOY: defaultKeyStatistics.earningsQuarterlyGrowth || null,
      QuarterlyRevenueGrowthYOY: defaultKeyStatistics.revenueQuarterlyGrowth || null,
      AnalystTargetPrice: financialData.targetMeanPrice || null,
      TrailingPE: quote.trailingPE || summaryDetail.trailingPE || null,
      ForwardPE: quote.forwardPE || summaryDetail.forwardPE || null,
      PriceToSalesRatioTTM: summaryDetail.priceToSalesTrailing12Months || null,
      PriceToBookRatio: defaultKeyStatistics.priceToBook || null,
      EVToRevenue: defaultKeyStatistics.enterpriseToRevenue || null,
      EVToEBITDA: defaultKeyStatistics.enterpriseToEbitda || null,
      Beta: defaultKeyStatistics.beta || null,
      // Fix for 52WeekHigh issue - safely extract these values
      "52WeekHigh": quote.fiftyTwoWeekHigh || null,
      "52WeekLow": quote.fiftyTwoWeekLow || null,
      "50DayMovingAverage": defaultKeyStatistics.fiftyDayAverage || null,
      "200DayMovingAverage": defaultKeyStatistics.twoHundredDayAverage || null,
      SharesOutstanding: defaultKeyStatistics.sharesOutstanding || null,
      DividendDate: summaryDetail.exDividendDate 
        ? new Date(summaryDetail.exDividendDate * 1000).toISOString().split('T')[0] 
        : null,
      ExDividendDate: summaryDetail.exDividendDate 
        ? new Date(summaryDetail.exDividendDate * 1000).toISOString().split('T')[0] 
        : null,
      Price: quote.regularMarketPrice || 0,
    };
    
    // Cache results
    cache.set(cacheKey, formattedOverview);
    
    return formattedOverview;
  } catch (error) {
    console.error(`Error fetching overview for ${symbol}:`, error);
    throw new Error(`Failed to fetch overview for ${symbol}`);
  }
};

/**
 * Get historical price data
 * @param {string} symbol - Stock symbol
 * @param {string} period - Time period (1d, 1wk, 1mo)
 * @param {string} range - Date range (1d, 5d, 1mo, 3mo, 6mo, 1y, 5y, max)
 * @returns {Promise<Object>} Historical price data
 */
const getHistoricalData = async (symbol, period = '1d', range = '1y') => {
  const cacheKey = `historical_${symbol}_${period}_${range}`;
  
  // Check cache first
  const cachedData = cache.get(cacheKey);
  if (cachedData) {
    return cachedData;
  }

  try {
    // Use chart() API instead of historical()
    const result = await yahooFinance.chart(symbol, {
      period: period,
      range: range,
      interval: period // Add interval parameter
    });
    
    // Format the data based on chart() response structure
    const formattedData = result.quotes.map(item => ({
      date: new Date(item.timestamp * 1000).toISOString().split('T')[0],
      open: item.open || 0,
      high: item.high || 0,
      low: item.low || 0,
      close: item.close || 0,
      adjClose: item.adjclose || 0,
      volume: item.volume || 0
    }));
    
    // Cache results
    cache.set(cacheKey, formattedData);
    
    return formattedData;
  } catch (error) {
    console.error(`Error fetching historical data for ${symbol}:`, error);
    
    // Return mock data as fallback
    return generateMockHistoricalData(symbol);
  }
};

// Helper function to generate fallback data
const generateMockHistoricalData = (symbol) => {
  const data = [];
  const today = new Date();
  let basePrice = 100;
  
  for (let i = 30; i >= 0; i--) {
    const date = new Date(today);
    date.setDate(date.getDate() - i);
    
    const change = (Math.random() - 0.48) * 3;
    basePrice += change;
    
    data.push({
      date: date.toISOString().split('T')[0],
      open: basePrice - Math.random(),
      high: basePrice + Math.random() * 2,
      low: basePrice - Math.random() * 2,
      close: basePrice,
      adjClose: basePrice,
      volume: Math.floor(Math.random() * 10000000) + 2000000
    });
  }
  
  return data;
};

/**
 * Get financial statements
 * This is a bit tricky with Yahoo Finance, as we don't have direct access to full statements
 * We'll combine various data points to approximate an income statement, balance sheet, etc.
 * @param {string} symbol - Stock symbol
 * @param {string} type - Statement type (income, balance, cashflow)
 * @returns {Promise<Object>} Financial statement data
 */
const getFinancials = async (symbol, type = 'income') => {
  const cacheKey = `financials_${symbol}_${type}`;
  
  // Check cache first
  const cachedData = cache.get(cacheKey);
  if (cachedData) {
    return cachedData;
  }

  try {
    // Get financial data
    const modules = [
      'incomeStatementHistory', 
      'balanceSheetHistory', 
      'cashflowStatementHistory',
      'incomeStatementHistoryQuarterly',
      'balanceSheetHistoryQuarterly',
      'cashflowStatementHistoryQuarterly'
    ];
    
    const quoteSummary = await yahooFinance.quoteSummary(symbol, { modules });
    
    let result = {
      symbol: symbol,
      annualReports: [],
      quarterlyReports: []
    };
    
    // Process based on the type of statement requested
    switch (type) {
      case 'income':
        if (quoteSummary.incomeStatementHistory?.incomeStatementHistory) {
          result.annualReports = processIncomeStatements(quoteSummary.incomeStatementHistory.incomeStatementHistory);
        }
        if (quoteSummary.incomeStatementHistoryQuarterly?.incomeStatementHistory) {
          result.quarterlyReports = processIncomeStatements(quoteSummary.incomeStatementHistoryQuarterly.incomeStatementHistory);
        }
        break;
        
      case 'balance':
        if (quoteSummary.balanceSheetHistory?.balanceSheetStatements) {
          result.annualReports = processBalanceSheets(quoteSummary.balanceSheetHistory.balanceSheetStatements);
        }
        if (quoteSummary.balanceSheetHistoryQuarterly?.balanceSheetStatements) {
          result.quarterlyReports = processBalanceSheets(quoteSummary.balanceSheetHistoryQuarterly.balanceSheetStatements);
        }
        break;
        
      case 'cashflow':
        if (quoteSummary.cashflowStatementHistory?.cashflowStatements) {
          result.annualReports = processCashFlows(quoteSummary.cashflowStatementHistory.cashflowStatements);
        }
        if (quoteSummary.cashflowStatementHistoryQuarterly?.cashflowStatements) {
          result.quarterlyReports = processCashFlows(quoteSummary.cashflowStatementHistoryQuarterly.cashflowStatements);
        }
        break;
        
      default:
        throw new Error(`Invalid statement type: ${type}`);
    }
    
    // Cache results
    cache.set(cacheKey, result);
    
    return result;
  } catch (error) {
    console.error(`Error fetching ${type} statement for ${symbol}:`, error);
    throw new Error(`Failed to fetch ${type} statement for ${symbol}`);
  }
};

/**
 * Process income statements from Yahoo Finance data
 * @param {Array} statements - Raw income statements from Yahoo Finance
 * @returns {Array} Processed income statements
 */
function processIncomeStatements(statements) {
  return statements.map(statement => {
    const date = new Date(statement.endDate * 1000);
    
    const netIncome = statement.netIncome || 0;
    const incomeTaxExpense = statement.incomeTaxExpense || 0;
    const interestExpense = statement.interestExpense || 0;
    
    return {
      fiscalDateEnding: date.toISOString().split('T')[0],
      reportedCurrency: 'USD', // Yahoo Finance normalizes to USD
      grossProfit: (statement.grossProfit || 0).toString(),
      totalRevenue: (statement.totalRevenue || 0).toString(),
      costOfRevenue: (statement.costOfRevenue || 0).toString(),
      costofGoodsAndServicesSold: (statement.costOfRevenue || 0).toString(),
      operatingIncome: (statement.operatingIncome || 0).toString(),
      sellingGeneralAndAdministrative: (statement.sellingGeneralAndAdministrative || 0).toString(),
      researchAndDevelopment: (statement.researchDevelopment || 0).toString(),
      operatingExpenses: (statement.totalOperatingExpenses || 0).toString(),
      investmentIncomeNet: '0', // Not directly available
      netInterestIncome: (statement.interestExpense || 0).toString(),
      interestIncome: '0', // Not directly available
      interestExpense: (statement.interestExpense || 0).toString(),
      nonInterestIncome: '0', // Not directly available
      otherNonOperatingIncome: (statement.otherOperatingExpenses || 0).toString(),
      depreciation: '0', // Usually in cash flow statement
      depreciationAndAmortization: '0', // Usually in cash flow statement
      incomeBeforeTax: (statement.incomeBeforeTax || 0).toString(),
      incomeTaxExpense: (statement.incomeTaxExpense || 0).toString(),
      interestAndDebtExpense: (statement.interestExpense || 0).toString(),
      netIncomeFromContinuingOperations: (statement.netIncomeFromContinuingOps || 0).toString(),
      comprehensiveIncomeNetOfTax: (statement.netIncome || 0).toString(),
      ebit: (netIncome + incomeTaxExpense + interestExpense).toString(),
      ebitda: (netIncome + incomeTaxExpense + interestExpense).toString(), // Without depreciation
      netIncome: (statement.netIncome || 0).toString()
    };
  });
}

/**
 * Process balance sheets from Yahoo Finance data
 * @param {Array} statements - Raw balance sheets from Yahoo Finance
 * @returns {Array} Processed balance sheets
 */
function processBalanceSheets(statements) {
  return statements.map(statement => {
    const date = new Date(statement.endDate * 1000);
    
    const totalAssets = statement.totalAssets || 0;
    const totalCurrentAssets = statement.totalCurrentAssets || 0;
    const totalLiab = statement.totalLiab || 0;
    const totalCurrentLiabilities = statement.totalCurrentLiabilities || 0;
    
    return {
      fiscalDateEnding: date.toISOString().split('T')[0],
      reportedCurrency: 'USD', // Yahoo Finance normalizes to USD
      totalAssets: totalAssets.toString(),
      totalCurrentAssets: totalCurrentAssets.toString(),
      cashAndCashEquivalentsAtCarryingValue: (statement.cash || 0).toString(),
      cashAndShortTermInvestments: (statement.cash || 0).toString(),
      inventory: (statement.inventory || 0).toString(),
      currentNetReceivables: (statement.netReceivables || 0).toString(),
      totalNonCurrentAssets: (totalAssets - totalCurrentAssets).toString(),
      propertyPlantEquipment: (statement.propertyPlantEquipment || 0).toString(),
      accumulatedDepreciationAmortizationPPE: '0', // Not directly available
      intangibleAssets: (statement.intangibleAssets || 0).toString(),
      intangibleAssetsExcludingGoodwill: (statement.intangibleAssets || 0).toString(),
      goodwill: (statement.goodWill || 0).toString(),
      investments: (statement.longTermInvestments || 0).toString(),
      longTermInvestments: (statement.longTermInvestments || 0).toString(),
      shortTermInvestments: (statement.shortTermInvestments || 0).toString(),
      otherCurrentAssets: (statement.otherCurrentAssets || 0).toString(),
      otherNonCurrentAssets: (statement.otherAssets || 0).toString(),
      totalLiabilities: totalLiab.toString(),
      totalCurrentLiabilities: totalCurrentLiabilities.toString(),
      currentAccountsPayable: (statement.accountsPayable || 0).toString(),
      deferredRevenue: '0', // Not directly available
      currentDebt: (statement.shortLongTermDebt || 0).toString(),
      shortTermDebt: (statement.shortLongTermDebt || 0).toString(),
      totalNonCurrentLiabilities: (totalLiab - totalCurrentLiabilities).toString(),
      capitalLeaseObligations: '0', // Not directly available
      longTermDebt: (statement.longTermDebt || 0).toString(),
      currentLongTermDebt: (statement.currentLongTermDebt || 0).toString(),
      longTermDebtNoncurrent: (statement.longTermDebt || 0).toString(),
      shortLongTermDebtTotal: (statement.shortLongTermDebt || 0).toString(),
      otherCurrentLiabilities: (statement.otherCurrentLiab || 0).toString(),
      otherNonCurrentLiabilities: (statement.otherLiab || 0).toString(),
      totalShareholderEquity: (statement.totalStockholderEquity || 0).toString(),
      treasuryStock: (statement.treasuryStock || 0).toString(),
      retainedEarnings: (statement.retainedEarnings || 0).toString(),
      commonStock: (statement.commonStock || 0).toString(),
      commonStockSharesOutstanding: (statement.commonStock || 0).toString() // This is not accurate but needed for format
    };
  });
}

/**
 * Process cash flow statements from Yahoo Finance data
 * @param {Array} statements - Raw cash flow statements from Yahoo Finance
 * @returns {Array} Processed cash flow statements
 */
function processCashFlows(statements) {
  return statements.map(statement => {
    const date = new Date(statement.endDate * 1000);
    
    return {
      fiscalDateEnding: date.toISOString().split('T')[0],
      reportedCurrency: 'USD', // Yahoo Finance normalizes to USD
      operatingCashflow: (statement.totalCashFromOperatingActivities || 0).toString(),
      paymentsForOperatingActivities: '0', // Not directly available
      proceedsFromOperatingActivities: '0', // Not directly available
      changeInOperatingLiabilities: (statement.changeToLiabilities || 0).toString(),
      changeInOperatingAssets: (statement.changeToOperatingActivities || 0).toString(),
      depreciationDepletionAndAmortization: (statement.depreciation || 0).toString(),
      capitalExpenditures: (statement.capitalExpenditures || 0).toString(),
      changeInReceivables: (statement.changeToAccountReceivables || 0).toString(),
      changeInInventory: (statement.changeToInventory || 0).toString(),
      profitLoss: (statement.netIncome || 0).toString(),
      cashflowFromInvestment: (statement.totalCashflowsFromInvestingActivities || 0).toString(),
      cashflowFromFinancing: (statement.totalCashFromFinancingActivities || 0).toString(),
      proceedsFromRepaymentsOfShortTermDebt: '0', // Not directly available
      paymentsForRepurchaseOfCommonStock: (statement.repurchaseOfStock || 0).toString(),
      paymentsForRepurchaseOfEquity: (statement.repurchaseOfStock || 0).toString(),
      paymentsForRepurchaseOfPreferredStock: '0', // Not directly available
      dividendPayout: (statement.dividendsPaid || 0).toString(),
      dividendPayoutCommonStock: (statement.dividendsPaid || 0).toString(),
      dividendPayoutPreferredStock: '0', // Not directly available
      proceedsFromIssuanceOfCommonStock: (statement.issuanceOfStock || 0).toString(),
      proceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet: (statement.netBorrowings || 0).toString(),
      proceedsFromIssuanceOfPreferredStock: '0', // Not directly available
      proceedsFromRepurchaseOfEquity: (statement.repurchaseOfStock || 0).toString(),
      proceedsFromSaleOfTreasuryStock: '0', // Not directly available
      changeInCashAndCashEquivalents: (statement.changeInCash || 0).toString(),
      changeInExchangeRate: '0', // Not directly available
      netIncome: (statement.netIncome || 0).toString()
    };
  });
}


const getBalanceSheetData = async (symbol) => {
  try {
    const balanceData = await getFinancials(symbol, 'balance');
    if (balanceData && balanceData.annualReports && balanceData.annualReports.length > 0) {
      // Use the most recent annual report
      const latestReport = balanceData.annualReports[0];
      
      // Extract total liabilities and shareholder equity
      const totalLiabilities = parseFloat(latestReport.totalLiabilities) || 0;
      const totalEquity = parseFloat(latestReport.totalShareholderEquity) || 0;
      
      // Calculate debt to equity ratio
      return {
        totalLiabilities,
        totalEquity,
        debtToEquity: totalEquity !== 0 ? totalLiabilities / totalEquity : null
      };
    }
    return { totalLiabilities: 0, totalEquity: 0, debtToEquity: null };
  } catch (error) {
    console.error(`Error fetching balance sheet data for ${symbol}:`, error);
    return { totalLiabilities: 0, totalEquity: 0, debtToEquity: null };
  }
};


/**
 * Calculate value investing metrics and provide analysis
 * @param {string} symbol - Stock symbol
 * @returns {Promise<Object>} Value analysis
 */
const getValueAnalysis = async (symbol) => {
  try {
    // Get necessary data for analysis
    const overview = await getCompanyOverview(symbol);
    const balanceSheetData = await getBalanceSheetData(symbol);
    
    // Extract key metrics
    const currentPrice = parseFloat(overview.Price) || 0;
    const eps = parseFloat(overview.EPS) || 0;
    const bookValue = parseFloat(overview.BookValue) || 0;
    const pe = parseFloat(overview.PERatio) || 0;
    const pb = parseFloat(overview.PriceToBookRatio) || 0;
    const roe = parseFloat(overview.ReturnOnEquityTTM) || 0;
    
    // Use the properly calculated debt to equity ratio
    const debtToEquity = balanceSheetData.debtToEquity;

    // Calculate value metrics
    let valueScore = 5; // Default middle value
    let intrinsicValue = null;
    
    // Calculate intrinsic value (simple Graham formula)
    if (eps > 0) {
      const growthRate = Math.min(roe || 0.10, 0.15); // Cap growth at 15%
      intrinsicValue = parseFloat((eps * (8.5 + 2 * growthRate * 100)).toFixed(2));
    }
    
    // Calculate value score if we have the necessary metrics
    if (pe && pb && roe) {
      // PE score (lower is better)
      let peScore = 0;
      if (pe <= 0) {
        peScore = 0;
      } else if (pe < 10) {
        peScore = 4;
      } else if (pe < 15) {
        peScore = 3;
      } else if (pe < 20) {
        peScore = 2;
      } else if (pe < 25) {
        peScore = 1;
      }
      
      // PB score (lower is better)
      let pbScore = 0;
      if (pb <= 0) {
        pbScore = 0;
      } else if (pb < 1) {
        pbScore = 4;
      } else if (pb < 2) {
        pbScore = 3;
      } else if (pb < 3) {
        pbScore = 2;
      } else if (pb < 4) {
        pbScore = 1;
      }
      
      // ROE score (higher is better)
      let roeScore = 0;
      if (roe <= 0) {
        roeScore = 0;
      } else if (roe > 0.20) {
        roeScore = 2;
      } else if (roe > 0.15) {
        roeScore = 1.5;
      } else if (roe > 0.10) {
        roeScore = 1;
      } else {
        roeScore = 0.5;
      }
      
      // Total score (max 10)
      const totalScore = peScore + pbScore + roeScore;
      valueScore = Math.min(Math.max(Math.round(totalScore * 10 / 10), 1), 10);
    }
    
    // Generate analysis text
    let analysis = "";
    
    // Interpret value score
    if (valueScore >= 8) {
      analysis += "Strong value opportunity. ";
    } else if (valueScore >= 6) {
      analysis += "Moderate value opportunity. ";
    } else if (valueScore >= 4) {
      analysis += "Fair value. ";
    } else {
      analysis += "Weak value proposition. ";
    }
    
    // Add price vs intrinsic value analysis
    if (intrinsicValue && currentPrice < intrinsicValue * 0.8) {
      analysis += `Trading significantly below estimated intrinsic value ($${intrinsicValue}). `;
    } else if (intrinsicValue && currentPrice < intrinsicValue) {
      analysis += `Trading below estimated intrinsic value ($${intrinsicValue}). `;
    } else if (intrinsicValue && currentPrice < intrinsicValue * 1.2) {
      analysis += `Trading near estimated intrinsic value ($${intrinsicValue}). `;
    } else if (intrinsicValue) {
      analysis += `Trading above estimated intrinsic value ($${intrinsicValue}). `;
    }
    
    // Add PE analysis
    if (pe <= 0) {
      analysis += "Negative earnings. ";
    } else if (pe < 10) {
      analysis += "PE ratio indicates potential undervaluation. ";
    } else if (pe > 25) {
      analysis += "PE ratio indicates potential overvaluation. ";
    } else {
      analysis += "PE ratio is within reasonable range. ";
    }
    
    // Add ROE analysis
    if (roe > 0.15) {
      analysis += "Strong return on equity indicates effective management.";
    } else if (roe > 0.10) {
      analysis += "Decent return on equity.";
    } else if (roe > 0) {
      analysis += "Below-average return on equity.";
    } else {
      analysis += "Negative return on equity is concerning.";
    }
    
    return {
      symbol,
      currentPrice,
      intrinsicValue,
      valueScore,
      metrics: {
        eps,
        bookValue,
        pe,
        pb,
        roe,
        debtToEquity
      },
      analysis
    };
  } catch (error) {
    console.error(`Error performing value analysis for ${symbol}:`, error);
    throw new Error(`Failed to perform value analysis for ${symbol}`);
  }
};

module.exports = {
  searchCompany,
  getQuote,
  getCompanyOverview,
  getHistoricalData,
  getFinancials,
  getValueAnalysis
};

===== FILE: docker-compose.yml =====

# docker-compose.yml
version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://backend:4000/api}
    restart: always
    networks:
      - elastic-finance-network
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
    restart: always
    networks:
      - elastic-finance-network
    volumes:
      - ./docs:/app/docs
    dns:
      - 8.8.8.8  # Google's DNS
      - 1.1.1.1  # Cloudflare's DNS

networks:
  elastic-finance-network:
    driver: bridge

===== FILE: docs/educational/bonds.md =====



===== FILE: docs/educational/calculating-stock-value.md =====



===== FILE: docs/educational/trading-basics.md =====



===== FILE: docs/educational/trading-fundamentals.md =====



===== FILE: docs/educational/trading-intermediate.md =====



===== FILE: frontend/Dockerfile =====

FROM node:18-alpine

# Set working directory
WORKDIR /app

# Copy package files first to leverage Docker caching
COPY package.json package-lock.json* ./

# Install dependencies
RUN npm install

# Install serve for static file serving
RUN npm install -g serve

# Copy configuration files
COPY jsconfig.json next.config.js postcss.config.js tailwind.config.js ./

# Copy scripts directory
COPY scripts ./scripts/

# Create necessary directories for images
RUN mkdir -p public/images/learn

# Generate placeholder images
RUN node scripts/setup-images.js

# Copy the rest of the application code
COPY . .

# Build the application
RUN npm run build

# Expose port
EXPOSE 3000

# Use serve to serve static files instead of next start
CMD ["serve", "-s", "out", "-p", "3000"]

===== FILE: frontend/.env =====

# API Connection
NEXT_PUBLIC_API_URL=http://localhost:4000/api

# Optional: Public API key if needed
NEXT_PUBLIC_FINANCE_API_KEY=your_public_api_key_here

# API Connection
NEXT_PUBLIC_API_URL=http://localhost:4000/api

===== FILE: frontend/jsconfig.json =====

{
    "compilerOptions": {
      "baseUrl": ".",
      "paths": {
        "@/*": ["./src/*"]
      }
    }
  }

===== FILE: frontend/next.config.js =====

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  
  // Set output to 'export' for static site generation
  output: 'export',
  
  // Configure image handling
  images: {
    unoptimized: true,
  },
  
  // Make sure PostCSS plugins are correctly applied
  webpack: (config) => {
    return config;
  },
}

module.exports = nextConfig

===== FILE: frontend/package.json =====

{
  "name": "elastic-finance-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.1",
    "axios": "^1.6.3",
    "chart.js": "^4.4.1",
    "next": "^14.0.4",
    "next-themes": "^0.2.1",
    "react": "^18.2.0",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^9.0.1",
    "recharts": "^2.8.0"
  },
  "devDependencies": {
    "@types/node": "^20.10.5",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.56.0",
    "eslint-config-next": "^14.0.4",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.4.0"
  }
}

===== FILE: frontend/postcss.config.js =====

module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  }

===== FILE: frontend/scripts/download-images.js =====

// Save this as scripts/download-images.js
const fs = require('fs');
const path = require('path');
const https = require('https');

// Create the directories if they don't exist
const imageDir = path.join(__dirname, '../public/images/learn');
if (!fs.existsSync(imageDir)) {
  fs.mkdirSync(imageDir, { recursive: true });
}

// List of image info: filename, Unsplash URL, and alt text
const images = [
  {
    name: 'value-investing.jpg',
    url: 'https://source.unsplash.com/LJ9KY8pIH3E/800x500',
    alt: 'Value investing concept'
  },
  {
    name: 'small-business.jpg',
    url: 'https://source.unsplash.com/wD1LRb9OeEo/800x500',
    alt: 'Small business valuation'
  },
  {
    name: 'balance-sheet.jpg',
    url: 'https://source.unsplash.com/EMPZ7yRZoGw/800x500',
    alt: 'Balance sheet and financial documents'
  },
  {
    name: 'stock-share.jpg',
    url: 'https://source.unsplash.com/fiXLQXAhCfk/800x500',
    alt: 'Stock market chart'
  },
  {
    name: 'buffett.jpg',
    url: 'https://source.unsplash.com/N9Pf2J656aQ/800x500',
    alt: 'Warren Buffett investing philosophy'
  },
  {
    name: 'bonds.jpg',
    url: 'https://source.unsplash.com/NeTPASr-bmQ/800x500',
    alt: 'Bond investments'
  },
  {
    name: 'bond-components.jpg',
    url: 'https://source.unsplash.com/yD5rv8_WzxA/800x500',
    alt: 'Components of bonds'
  },
  {
    name: 'bond-yield.jpg',
    url: 'https://source.unsplash.com/9wSnKXhGQdE/800x500',
    alt: 'Bond yield and valuation'
  },
  {
    name: 'stock-market.jpg',
    url: 'https://source.unsplash.com/ja8nQ-WsFgM/800x500',
    alt: 'Stock market basics'
  },
  {
    name: 'market-crash.jpg',
    url: 'https://source.unsplash.com/OHOU-5UVIYQ/800x500',
    alt: 'Market crashes and bubbles'
  },
  {
    name: 'federal-reserve.jpg',
    url: 'https://source.unsplash.com/uzhFra2FJ-g/800x500',
    alt: 'Federal Reserve building'
  },
  {
    name: 'financial-statements.jpg',
    url: 'https://source.unsplash.com/8lnbXtxFGZw/800x500',
    alt: 'Reading financial statements'
  },
  {
    name: 'intrinsic-value.jpg',
    url: 'https://source.unsplash.com/dBI_My696Rk/800x500',
    alt: 'Calculating intrinsic value'
  }
];

// Function to download an image
function downloadImage(url, filename) {
  return new Promise((resolve, reject) => {
    const filepath = path.join(imageDir, filename);
    
    const file = fs.createWriteStream(filepath);
    
    https.get(url, (response) => {
      response.pipe(file);
      
      file.on('finish', () => {
        file.close();
        console.log(`✓ Downloaded: ${filename}`);
        resolve();
      });
    }).on('error', (err) => {
      fs.unlink(filepath, () => {}); // Delete the file if an error occurs
      console.error(`✗ Error downloading ${filename}:`, err.message);
      reject(err);
    });
  });
}

// Download all images
async function downloadAllImages() {
  console.log('Starting image download...');
  
  for (const image of images) {
    try {
      await downloadImage(image.url, image.name);
    } catch (error) {
      console.error(`Failed to download ${image.name}`);
    }
  }
  
  console.log('All downloads completed!');
}

downloadAllImages();

===== FILE: frontend/scripts/setup-images.js =====

// frontend/scripts/setup-images.js
const fs = require('fs');
const path = require('path');

// Create the directories if they don't exist
const publicDir = path.join(process.cwd(), 'public');
const imagesDir = path.join(publicDir, 'images');
const imageDir = path.join(imagesDir, 'learn');

console.log('Setting up image directories...');

if (!fs.existsSync(publicDir)) {
  fs.mkdirSync(publicDir, { recursive: true });
  console.log(`Created directory: ${publicDir}`);
}

if (!fs.existsSync(imagesDir)) {
  fs.mkdirSync(imagesDir, { recursive: true });
  console.log(`Created directory: ${imagesDir}`);
}

if (!fs.existsSync(imageDir)) {
  fs.mkdirSync(imageDir, { recursive: true });
  console.log(`Created directory: ${imageDir}`);
}

// Create a basic SVG placeholder for each image
function createPlaceholderImage(filename, title) {
  const filepath = path.join(imageDir, filename);
  
  // Create a simple SVG with the title text
  const svgContent = `<svg xmlns="http://www.w3.org/2000/svg" width="800" height="500" viewBox="0 0 800 500">
    <rect width="800" height="500" fill="#f0f4f8" />
    <rect x="10" y="10" width="780" height="480" fill="#e1effe" stroke="#3b82f6" stroke-width="2" />
    <text x="400" y="200" font-family="Arial" font-size="32" text-anchor="middle" fill="#3b82f6" font-weight="bold">${title}</text>
    <text x="400" y="250" font-family="Arial" font-size="24" text-anchor="middle" fill="#4b5563">Value Investing Learning Resource</text>
    <text x="400" y="300" font-family="Arial" font-size="18" text-anchor="middle" fill="#6b7280">Placeholder Image</text>
  </svg>`;
  
  fs.writeFileSync(filepath, svgContent);
  console.log(`Created placeholder image: ${filepath}`);
}

// List of image info: filename and title
const images = [
  { name: 'value-investing.jpg', title: 'Value Investing Basics' },
  { name: 'small-business.jpg', title: 'Valuing a Small Business' },
  { name: 'balance-sheet.jpg', title: 'Balance Sheet & Margin of Safety' },
  { name: 'stock-share.jpg', title: 'What is a Share?' },
  { name: 'buffett.jpg', title: 'Warren Buffett Stock Basics' },
  { name: 'bonds.jpg', title: 'What is a Bond?' },
  { name: 'bond-components.jpg', title: 'Components of a Bond' },
  { name: 'bond-yield.jpg', title: 'Bond Valuation & Yield' },
  { name: 'stock-market.jpg', title: 'Stock Market Basics' },
  { name: 'market-crash.jpg', title: 'Market Crashes & Bubbles' },
  { name: 'federal-reserve.jpg', title: 'What is the Fed?' },
  { name: 'financial-statements.jpg', title: 'Reading Financial Statements' },
  { name: 'intrinsic-value.jpg', title: 'Calculating Intrinsic Value' },
  { name: 'dcf.jpg', title: 'Discounted Cash Flow Analysis' },
  { name: 'special-situations.jpg', title: 'Special Situations Investing' },
  { name: 'default.jpg', title: 'Value Investing' }
];

// Create placeholder images
console.log('Creating placeholder images...');
images.forEach(image => {
  createPlaceholderImage(image.name, image.title);
});

console.log('Image setup complete!');

===== FILE: frontend/src/app/globals.css =====

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Root variables for light mode (default) */
:root {
  --foreground-rgb: 15, 23, 42;
  --background-rgb: 248, 250, 252;
  --primary-light: 226, 232, 240;
  --primary-medium: 148, 163, 184;
  --primary-dark: 71, 85, 105;
  --accent-light: 224, 242, 254;
  --accent-medium: 56, 189, 248; 
  --accent-dark: 2, 132, 199;
  --success-color: 34, 197, 94;
  --warning-color: 234, 179, 8;
  --error-color: 239, 68, 68;
  --card-bg: 255, 255, 255;
  --card-border: 241, 245, 249;
}

/* Dark mode variables */
.dark {
  --foreground-rgb: 248, 250, 252;
  --background-rgb: 15, 23, 42;
  --primary-light: 51, 65, 85;
  --primary-medium: 71, 85, 105;
  --primary-dark: 148, 163, 184;
  --accent-light: 3, 105, 161;
  --accent-medium: 14, 165, 233;
  --accent-dark: 186, 230, 253;
  --success-color: 22, 163, 74;
  --warning-color: 202, 138, 4;
  --error-color: 220, 38, 38;
  --card-bg: 30, 41, 59;
  --card-border: 51, 65, 85;
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-rgb));
}

@layer base {
  h1 {
    @apply text-3xl font-bold mb-4;
  }
  h2 {
    @apply text-2xl font-bold mb-3;
  }
  h3 {
    @apply text-xl font-semibold mb-2;
  }
  a {
    @apply text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300;
  }
  table {
    @apply w-full border-collapse;
  }
  th, td {
    @apply border border-slate-200 dark:border-slate-700 p-2;
  }
  th {
    @apply bg-slate-100 dark:bg-slate-800;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded font-medium focus:outline-none focus:ring-2 focus:ring-offset-2;
  }
  
  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 dark:bg-blue-700 dark:hover:bg-blue-600;
  }
  
  .btn-secondary {
    @apply bg-teal-600 text-white hover:bg-teal-700 focus:ring-teal-500 dark:bg-teal-700 dark:hover:bg-teal-600;
  }
  
  .card {
    @apply bg-white dark:bg-slate-800 rounded-lg shadow-md p-6 border border-slate-100 dark:border-slate-700;
  }
  
  .input {
    @apply w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent;
  }
}

/* Override for light mode pastel buttons */
.light .btn-primary {
  @apply bg-sky-500 hover:bg-sky-600;
}

.light .btn-secondary {
  @apply bg-emerald-500 hover:bg-emerald-600;
}

/* Improve visibility for prose content */
.prose img {
  @apply rounded-lg shadow-md mx-auto my-8;
}

.prose a {
  @apply text-blue-600 hover:text-blue-800 underline;
}

.prose blockquote {
  @apply border-l-4 border-blue-500 pl-4 italic my-4 text-slate-700 dark:text-slate-300;
}

.prose table {
  @apply overflow-x-auto block my-6; 
}
/* Add styling for the value score bar */
.value-score-bar {
  @apply h-2.5 rounded-full transition-all duration-300 ease-in-out;
}

.value-score-bar-bullish {
  @apply bg-green-500;
}

.value-score-bar-neutral {
  @apply bg-yellow-500;
}

.value-score-bar-bearish {
  @apply bg-red-500;
}


===== FILE: frontend/src/app/layout.jsx =====

import './globals.css';
import Navbar from '@/components/layout/Navbar';
import Footer from '@/components/layout/Footer';
import Providers from './providers';

export const metadata = {
  title: 'Elastic Finance - Value Investing Platform',
  description: 'Learn and apply value investing principles with real financial data',
};

export default function RootLayout({ children }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <Providers>
          <div className="min-h-screen flex flex-col">
            <Navbar />
            <main className="flex-grow container mx-auto px-4 py-8">
              {children}
            </main>
            <Footer />
          </div>
        </Providers>
      </body>
    </html>
  );
}

===== FILE: frontend/src/app/learn/page.jsx =====

// frontend/src/app/learn/page.jsx
'use client';

import { useState, useEffect, Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { getArticlesByLevel } from '@/lib/learn/contentService';
import ComingSoonPlaceholder from '@/components/learn/ComingSoonPlaceholder';

// Separate component that uses useSearchParams
function LearningContent() {
  const searchParams = useSearchParams();
  const [activeTab, setActiveTab] = useState('beginner');
  const [articles, setArticles] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // Set active tab based on URL query parameter (if present)
  useEffect(() => {
    const tab = searchParams.get('tab');
    if (tab && ['beginner', 'intermediate', 'advanced'].includes(tab)) {
      setActiveTab(tab);
    }
  }, [searchParams]);

  // Load articles when the active tab changes
  useEffect(() => {
    const loadArticles = async () => {
      setIsLoading(true);
      try {
        // Get articles for the active tab
        const articles = getArticlesByLevel(activeTab);
        
        // Sort articles by order
        const sortedArticles = [...articles].sort((a, b) => a.order - b.order);
        
        setArticles(sortedArticles);
      } catch (error) {
        console.error('Error loading articles:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    loadArticles();
  }, [activeTab]);

  // Render different content based on the active tab
  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="flex justify-center items-center py-20">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      );
    }

    // For intermediate and advanced sections, show placeholder
    if (activeTab !== 'beginner') {
      return <ComingSoonPlaceholder level={activeTab} />;
    }

    // For beginner section, show article cards
    return articles.length > 0 ? (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {articles.map((article) => (
          <Link
            key={article.slug}
            href={`/learn/${activeTab}/${article.slug}`}
            className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300"
          >
            <div className="relative h-48 w-full bg-gray-200 dark:bg-gray-700">
              {/* Use a fallback mechanism for images */}
              {article.imagePath && (
                <img
                  src={article.imagePath}
                  alt={article.title}
                  className="object-cover w-full h-full"
                  onError={(e) => {
                    e.target.onerror = null;
                    e.target.src = '/images/learn/default.jpg';
                  }}
                />
              )}
            </div>
            <div className="p-6">
              <div className="text-sm text-blue-600 dark:text-blue-400 mb-2">
                Lesson {article.order}
              </div>
              <h3 className="text-xl font-semibold mb-2">{article.title}</h3>
              <p className="text-gray-600 dark:text-gray-400 mb-4">
                {article.description}
              </p>
              <div className="text-blue-600 dark:text-blue-400 hover:underline">
                Read more →
              </div>
            </div>
          </Link>
        ))}
      </div>
    ) : (
      <div className="text-center py-20">
        <h3 className="text-xl text-gray-600 dark:text-gray-400">
          No articles available for this level yet.
        </h3>
        <p className="mt-2">
          Please check back later or try another skill level.
        </p>
      </div>
    );
  };

  return (
    <>
      {/* Preston Pysh Attribution Box */}
      <div className="mb-10 p-6 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-100 dark:border-blue-800">
        <div className="flex flex-col md:flex-row items-center gap-4">
          <div className="flex-shrink-0">
            <a href="https://www.youtube.com/@PrestonPysh" target="_blank" rel="noopener noreferrer">
              <div className="w-24 h-24 rounded-full overflow-hidden border-2 border-blue-500">
                <img 
                  src="/images/learn/preston.jpg" 
                  alt="Preston Pysh" 
                  className="w-full h-full object-cover"
                />
              </div>
            </a>
          </div>
          <div>
            <h3 className="text-xl font-bold mb-2">Content Acknowledgment</h3>
            <p className="text-gray-700 dark:text-gray-300">
              The educational content in this section has been adapted from the teachings of 
              <a 
                href="https://www.youtube.com/@PrestonPysh" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-blue-600 dark:text-blue-400 font-medium mx-1 hover:underline"
              >
                Preston Pysh
              </a>
              , whose exceptional value investing tutorials have been foundational to this resource.
              We highly recommend visiting his YouTube channel for more in-depth financial education.
            </p>
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="flex justify-center mb-12">
        <div className="inline-flex rounded-md shadow-sm">
          <button
            onClick={() => setActiveTab('beginner')}
            className={`px-6 py-3 text-sm font-medium rounded-l-md ${
              activeTab === 'beginner'
                ? 'bg-blue-600 text-white'
                : 'bg-white text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700'
            }`}
          >
            Beginner
          </button>
          <button
            onClick={() => setActiveTab('intermediate')}
            className={`px-6 py-3 text-sm font-medium ${
              activeTab === 'intermediate'
                ? 'bg-blue-600 text-white'
                : 'bg-white text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700'
            }`}
          >
            Intermediate
          </button>
          <button
            onClick={() => setActiveTab('advanced')}
            className={`px-6 py-3 text-sm font-medium rounded-r-md ${
              activeTab === 'advanced'
                ? 'bg-blue-600 text-white'
                : 'bg-white text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700'
            }`}
          >
            Advanced
          </button>
        </div>
      </div>
      
      {/* Content Area */}
      {renderContent()}
      
      {/* Resources Section with Added Links */}
      <div className="mt-16 pt-10 border-t border-gray-200 dark:border-gray-700">
        <h2 className="text-2xl font-bold mb-6">Additional Resources</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
            <h3 className="text-lg font-semibold mb-3">Value Investing Books</h3>
            <ul className="space-y-3">
              <li>
                <a 
                  href="https://www.amazon.com/Intelligent-Investor-Definitive-Investing-Essentials/dp/0060555661" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  The Intelligent Investor - Benjamin Graham
                </a>
              </li>
              <li>
                <a 
                  href="https://www.amazon.com/Security-Analysis-Principles-Benjamin-Graham/dp/0071592539" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  Security Analysis - Benjamin Graham & David Dodd
                </a>
              </li>
              <li>
                <a 
                  href="https://www.amazon.com/Essays-Warren-Buffett-Lessons-Corporate/dp/1531017509" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  The Essays of Warren Buffett - Warren Buffett
                </a>
              </li>
            </ul>
          </div>
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
            <h3 className="text-lg font-semibold mb-3">Useful Tools</h3>
            <ul className="space-y-3">
              <li>
                <a 
                  href="https://finviz.com/" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  Finviz Stock Screener
                </a>
              </li>
              <li>
                <a 
                  href="https://www.sec.gov/edgar/searchedgar/companysearch" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  SEC EDGAR Database
                </a>
              </li>
              <li>
                <a 
                  href="https://www.gurufocus.com/term/dcf/MS/DCF/Morgan+Stanley" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-blue-600 dark:text-blue-400 hover:underline"
                >
                  GuruFocus DCF Calculator
                </a>
              </li>
            </ul>
          </div>
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
            <h3 className="text-lg font-semibold mb-3">Learning Path</h3>
            <p className="text-gray-600 dark:text-gray-400">
              Follow our structured learning path to master value investing from the basics to advanced techniques.
            </p>
            <div className="mt-4 space-y-2">
              <a href="/learn?tab=beginner" className="text-blue-600 dark:text-blue-400 hover:underline block">
                Beginner Path →
              </a>
              <a href="/learn?tab=intermediate" className="text-blue-600 dark:text-blue-400 hover:underline block">
                Intermediate Path →
              </a>
              <a href="/learn?tab=advanced" className="text-blue-600 dark:text-blue-400 hover:underline block">
                Advanced Path →
              </a>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

// Main Learn Page component that wraps LearningContent in a Suspense boundary
export default function LearnPage() {
  return (
    <div className="max-w-7xl mx-auto py-10 px-4 sm:px-6 lg:px-8">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold mb-4">Learning Center</h1>
        <p className="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
          Discover the principles of value investing through our comprehensive educational resources.
        </p>
      </div>
      
      {/* Wrap the component that uses useSearchParams in a Suspense boundary */}
      <Suspense fallback={
        <div className="flex justify-center items-center py-20">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      }>
        <LearningContent />
      </Suspense>
    </div>
  );
}

===== FILE: frontend/src/app/page.jsx =====

// frontend/src/app/page.jsx
'use client';

import StockDashboard from '@/components/dashboard/StockDashboard';

export default function Home() {
  return (
    <div className="space-y-8">

      <StockDashboard />
      
    </div>
  );
}

===== FILE: frontend/src/app/providers.jsx =====

'use client';

import { ThemeProvider } from 'next-themes';
import { StockDataProvider } from '@/contexts/StockDataContext';
import { EducationalContentProvider } from '@/contexts/EducationalContentContext';

// This component combines all context providers in one place
export default function Providers({ children }) {
  return (
    <ThemeProvider attribute="class">
      <StockDataProvider>
        <EducationalContentProvider>
          {children}
        </EducationalContentProvider>
      </StockDataProvider>
    </ThemeProvider>
  );
}

===== FILE: frontend/src/components/analysis/AIAnalyst.jsx =====

// frontend/src/components/analysis/AIAnalyst.jsx
'use client';

import { useState, useEffect } from 'react';

export default function AIAnalyst({ stockData, newsData, valueAnalysis }) {
  const [analysis, setAnalysis] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [sentimentScore, setSentimentScore] = useState(null);

  // Reset state when stock data changes
  useEffect(() => {
    setAnalysis('');
    setSentimentScore(null);
    
    if (stockData && valueAnalysis) {
      generateAnalysis();
    }
  }, [stockData, newsData, valueAnalysis]);

  const generateAnalysis = () => {
    setIsLoading(true);
    
    // In a real application, this would be an API call to your backend
    // For demonstration, we'll create a mock analysis
    setTimeout(() => {
      const mockNewsAnalysis = generateMockNewsAnalysis();
      const mockSentiment = calculateSentiment(valueAnalysis, mockNewsAnalysis.sentiment);
      
      setAnalysis(mockNewsAnalysis.text);
      setSentimentScore(mockSentiment);
      setIsLoading(false);
    }, 1500);
  };
  
  // Generate a mock news analysis
  const generateMockNewsAnalysis = () => {
    if (!stockData || !stockData.symbol) {
      return {
        text: "No stock data available for analysis.",
        sentiment: 5
      };
    }
    
    // In a real app, this would be done by an AI or sentiment analysis algorithm
    const sentiment = Math.random() * 10; // Random score between 0-10
    
    let sentimentText;
    if (sentiment >= 7) {
      sentimentText = 'positive';
    } else if (sentiment >= 4) {
      sentimentText = 'neutral';
    } else {
      sentimentText = 'negative';
    }
    
    const texts = {
      positive: `Recent news for ${stockData.symbol} has been largely positive. The company has shown strong quarterly earnings and several analysts have increased their price targets. Management's forward guidance was optimistic, mentioning plans for expansion into new markets and potential for increased market share.`,
      neutral: `News for ${stockData.symbol} has been mixed recently. While the company reported meeting expectations for the quarter, there are some concerns about increasing competition in the sector. Analysts have generally maintained their positions, with a balanced outlook for future growth.`,
      negative: `${stockData.symbol} has faced some negative press recently. The company missed earnings expectations, and there are concerns about declining market share. Several analysts have lowered their price targets, and the recent industry outlook suggests potential challenges ahead.`
    };
    
    return {
      text: texts[sentimentText],
      sentiment: sentiment
    };
  };
  
  // Calculate overall sentiment score combining value analysis and news
  const calculateSentiment = (valueAnalysis, newsSentiment) => {
    if (!valueAnalysis) return null;
    
    // Weight the value score (70%) and news sentiment (30%)
    const valueWeight = 0.7;
    const newsWeight = 0.3;
    
    const valueScore = valueAnalysis.valueScore || 5;
    return (valueScore * valueWeight + newsSentiment * newsWeight).toFixed(1);
  };
  
  // Determine styling based on sentiment score
  const getSentimentColor = (score) => {
    if (score >= 7) return 'text-green-600 dark:text-green-400';
    if (score >= 4) return 'text-yellow-600 dark:text-yellow-400';
    return 'text-red-600 dark:text-red-400';
  };
  
  const getSentimentLabel = (score) => {
    if (score >= 7) return 'Bullish';
    if (score >= 4) return 'Neutral';
    return 'Bearish';
  };

  if (isLoading) {
    return (
      <div className="card">
        <h3 className="text-xl font-semibold mb-4">AI Analyst</h3>
        <div className="flex items-center justify-center p-6">
          <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-primary-500"></div>
          <span className="ml-3">Analyzing market sentiment...</span>
        </div>
      </div>
    );
  }

  if (!stockData || !valueAnalysis) {
    return (
      <div className="card">
        <h3 className="text-xl font-semibold mb-4">AI Analyst</h3>
        <p className="text-gray-500 dark:text-gray-400">
          Select a stock to see AI-powered analysis
        </p>
      </div>
    );
  }

  return (
    <div className="card">
      <h3 className="text-xl font-semibold mb-4">AI Analyst</h3>
      
      {sentimentScore && (
        <div className="mb-6">
          <div className="flex justify-between items-center mb-2">
            <span className="text-gray-700 dark:text-gray-300">Overall Sentiment</span>
            <span className={`font-bold text-lg ${getSentimentColor(sentimentScore)}`}>
              {sentimentScore}/10
            </span>
          </div>
          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
            <div 
              className={`h-2.5 rounded-full ${
                sentimentScore >= 7 ? 'bg-green-600' : 
                sentimentScore >= 4 ? 'bg-yellow-500' : 'bg-red-600'
              }`}
              style={{ width: `${sentimentScore * 10}%` }}
            ></div>
          </div>
          <p className="mt-2 text-right text-sm text-gray-600 dark:text-gray-400">
            {getSentimentLabel(sentimentScore)}
          </p>
        </div>
      )}
      
      <div className="mb-4">
        <h4 className="font-semibold mb-2">Recent News Analysis:</h4>
        <p className="text-gray-700 dark:text-gray-300">
          {analysis || "No analysis available."}
        </p>
      </div>
      
      <div>
        <h4 className="font-semibold mb-2">Financial Assessment:</h4>
        <p className="text-gray-700 dark:text-gray-300">
          {valueAnalysis ? valueAnalysis.analysis : 'No financial assessment available.'}
        </p>
      </div>
    </div>
  );
}

===== FILE: frontend/src/components/analysis/EnhancedAIAnalyst.jsx =====

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import EnhancedAnalysisVisuals from './EnhancedAnalysisVisuals';

export default function EnhancedAIAnalyst({ stockData, companyOverview, financials, valueAnalysis }) {
  const [showFullAnalysis, setShowFullAnalysis] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [analysis, setAnalysis] = useState(null);
  const [error, setError] = useState(null);
  
  // Reset state when stock changes
  useEffect(() => {
    setAnalysis(null);
    setShowFullAnalysis(false);
    setError(null);
  }, [stockData?.symbol]);

  const generateFullAnalysis = async () => {
    if (analysis) {
      setShowFullAnalysis(true);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // Make API call to your backend LLM service
      const apiUrl = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/api'}/finance/enhanced-analysis/${stockData.symbol}`;
      
      console.log(`Fetching enhanced analysis from: ${apiUrl}`);
      
      const response = await axios.get(apiUrl);
      
      // Get the LLM-generated analysis
      if (!response.data || !response.data.enhancedAnalysis) {
        throw new Error('Invalid response from analysis API');
      }
      
      const llmAnalysis = response.data.enhancedAnalysis;
      setAnalysis(llmAnalysis);
      setShowFullAnalysis(true);
    } catch (error) {
      console.error('Error generating analysis:', error);
      setError(`Failed to generate analysis: ${error.message || 'Unknown error'}`);
    } finally {
      setIsLoading(false);
    }
  };

  const renderKeySection = (section, importance = 'medium') => {
    if (!section) return null;
    
    // Determine styling based on importance
    const bgClass = {
      high: 'bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border border-blue-100 dark:border-blue-900/30',
      medium: 'bg-white dark:bg-gray-800',
      low: 'bg-gray-50 dark:bg-gray-800/80'
    }[importance];
    
    return (
      <div className={`card p-4 mb-4 ${bgClass}`}>
        <h4 className="text-xl font-semibold mb-3">{section.title}</h4>
        <div className="text-gray-700 dark:text-gray-300 whitespace-pre-line">{section.content}</div>
      </div>
    );
  };

  const findSectionByTitle = (sections, titlePattern) => {
    return sections?.find(section => 
      section.title.toUpperCase().includes(titlePattern.toUpperCase()) || 
      section.title.match(new RegExp(`^\\d+\\.\\s*${titlePattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}`, 'i'))
    );
  };

  // Render the component
  if (!stockData || !valueAnalysis) {
    return (
      <div className="card">
        <h3 className="text-xl font-semibold mb-4">Enhanced AI Analysis</h3>
        <p className="text-gray-500 dark:text-gray-400">
          Select a stock to see enhanced AI-powered analysis
        </p>
      </div>
    );
  }

  return (
    <div className="mt-6">
      {!showFullAnalysis ? (
        <button
          onClick={generateFullAnalysis}
          className="w-full py-3 px-4 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg shadow focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors"
          disabled={isLoading}
        >
          {isLoading ? (
            <span className="flex items-center justify-center">
              <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Generating In-Depth AI Value Analysis...
            </span>
          ) : (
            'Generate In-Depth AI Value Analysis'
          )}
        </button>
      ) : (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
          <div className="flex justify-between items-start mb-6">
            <h3 className="text-2xl font-bold">In-Depth AI Value Analysis</h3>
            <button
              onClick={() => setShowFullAnalysis(false)}
              className="text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          {error && (
            <div className="mb-6 p-4 border-l-4 border-red-500 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-300">
              <p className="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
                {error}
              </p>
            </div>
          )}
          
          {analysis && (
            <div className="space-y-6">
              {/* Display the summary at the top */}
              <div className="p-5 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-lg border border-blue-100 dark:border-blue-900/30">
                <h3 className="text-xl font-semibold mb-3">Analysis Summary</h3>
                <p className="text-lg text-gray-800 dark:text-gray-200">{analysis.summary}</p>
              </div>
              
              {/* Display key sections in order of importance */}
              {analysis.sections && (
                <div className="space-y-6">
                  {/* High importance sections */}
                  {renderKeySection(findSectionByTitle(analysis.sections, "BUSINESS OVERVIEW"), 'high')}
                  {renderKeySection(findSectionByTitle(analysis.sections, "VALUATION ASSESSMENT"), 'high')}
                  
                  {/* Updated to high importance for premium blue styling */}
                  {renderKeySection(findSectionByTitle(analysis.sections, "MANAGEMENT QUALITY"), 'high')}
                  {renderKeySection(findSectionByTitle(analysis.sections, "FINANCIAL STRENGTH ANALYSIS"), 'high')}
                  {renderKeySection(findSectionByTitle(analysis.sections, "PROFITABILITY & EARNINGS ANALYSIS"), 'high')}
                  
                  {/* Updated to high importance for premium blue styling */}
                  {renderKeySection(findSectionByTitle(analysis.sections, "COMPETITIVE ANALYSIS"), 'high')}
                  {renderKeySection(findSectionByTitle(analysis.sections, "INVESTMENT CONCLUSION"), 'high')}
                </div>
              )}
              
              {/* Add the EnhancedAnalysisVisuals AFTER all the text sections */}
              <div className="mt-8 pt-6 border-t-2 border-gray-200 dark:border-gray-700">
                <h2 className="text-2xl font-bold mb-6">Financial Analysis & Recommendation</h2>
                <EnhancedAnalysisVisuals analysis={analysis} />
              </div>
              
              <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700 text-sm text-gray-500 dark:text-gray-400">
                <p>This analysis is generated using AI and value investing principles. For educational purposes only. Always conduct your own research before making investment decisions.</p>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

===== FILE: frontend/src/components/analysis/EnhancedAnalysisVisuals.jsx =====

// src/components/analysis/EnhancedAnalysisVisuals.jsx
import React from 'react';
import { 
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,
  LineChart, Line, ComposedChart, Cell
} from 'recharts';

const customTooltipStyle = {
    backgroundColor: 'white',
    border: '1px solid #ccc',
    borderRadius: '5px',
    padding: '10px',
    color: '#333', // Dark text color for all tooltip text
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
  };

const ValueMetricsChart = ({ data }) => {
  const getBarColor = (status) => {
    switch(status) {
      case 'good': return '#48bb78'; // green
      case 'neutral': return '#ecc94b'; // yellow
      case 'poor': return '#f56565'; // red
      default: return '#a0aec0'; // gray
    }
  };

  return (
    <div className="mb-6">
      <h3 className="text-lg font-semibold mb-2">Value Investing Metrics</h3>
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow">
        <ResponsiveContainer width="100%" height={300}>
          <ComposedChart
            data={data}
            margin={{ top: 20, right: 30, left: 20, bottom: 60 }}
          >
            <CartesianGrid strokeDasharray="3 3" opacity={0.2} />
            <XAxis dataKey="name" angle={-45} textAnchor="end" height={60} />
            <YAxis />
            <Tooltip 
            formatter={(value, name, props) => [value, name]}
            labelFormatter={(label) => `Metric: ${label}`}
            contentStyle={customTooltipStyle}
            />
            <Bar dataKey="value" name="Current Value">
              {data.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={getBarColor(entry.status)} />
              ))}
            </Bar>
            <Bar dataKey="benchmark" name="Buffett's Benchmark" fill="#4299e1" opacity={0.3} />
          </ComposedChart>
        </ResponsiveContainer>
        <div className="mt-2 text-xs text-gray-500 dark:text-gray-400">
          Green bars indicate metrics meeting Buffett's criteria
        </div>
      </div>
    </div>
  );
};

const FinancialPerformanceChart = ({ labels, datasets }) => {
  const data = labels.map((label, index) => {
    const dataPoint = { name: label };
    datasets.forEach(dataset => {
      dataPoint[dataset.name] = dataset.data[index];
    });
    return dataPoint;
  });

  return (
    <div className="mb-6">
      <h3 className="text-lg font-semibold mb-2">Financial Performance</h3>
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow">
        <ResponsiveContainer width="100%" height={300}>
          <LineChart
            data={data}
            margin={{ top: 20, right: 30, left: 20, bottom: 10 }}
          >
            <CartesianGrid strokeDasharray="3 3" opacity={0.2} />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip 
            formatter={(value, name) => [`$${value}M`, name]}
            labelFormatter={(label) => `Year: ${label}`}
            contentStyle={customTooltipStyle}
            />
            <Legend />
            {datasets.map((dataset, index) => (
              <Line
                key={index}
                type="monotone"
                dataKey={dataset.name}
                stroke={dataset.color || `#${Math.floor(Math.random()*16777215).toString(16)}`}
                strokeWidth={2}
                dot={{ r: 4 }}
                activeDot={{ r: 6 }}
              />
            ))}
          </LineChart>
        </ResponsiveContainer>
        <div className="mt-2 text-xs text-gray-500 dark:text-gray-400">
          Financial performance over time (in millions of dollars)
        </div>
      </div>
    </div>
  );
};

const ValueComparisonChart = ({ data }) => {
  const { currentPrice, intrinsicValue, marginOfSafety, status } = data;
  
  // Colors for status
  const getStatusColor = (status) => {
    switch(status) {
      case 'undervalued': return 'bg-green-500 dark:bg-green-600';
      case 'overvalued': return 'bg-red-500 dark:bg-red-600';
      default: return 'bg-yellow-500 dark:bg-yellow-600';
    }
  };
  
  const getStatusText = (status) => {
    switch(status) {
      case 'undervalued': return 'Potentially Undervalued';
      case 'overvalued': return 'Potentially Overvalued';
      default: return 'Fair Value';
    }
  };
  
  return (
    <div className="mb-6">
      <h3 className="text-lg font-semibold mb-2">Value Assessment</h3>
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow">
        <div className="flex items-center justify-center mb-4">
          <div className={`text-xl font-bold py-2 px-4 rounded-full text-white ${getStatusColor(status)}`}>
            {getStatusText(status)}
          </div>
        </div>
        
        <div className="grid grid-cols-2 gap-4 text-center">
          <div className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg">
            <div className="text-sm text-gray-500 dark:text-gray-400">Current Price</div>
            <div className="text-2xl font-bold">${currentPrice.toFixed(2)}</div>
          </div>
          
          <div className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg">
            <div className="text-sm text-gray-500 dark:text-gray-400">Intrinsic Value</div>
            <div className="text-2xl font-bold">${intrinsicValue.toFixed(2)}</div>
          </div>
        </div>
        
        <div className="mt-4 text-center">
          <div className="text-sm text-gray-500 dark:text-gray-400">Margin of Safety</div>
          <div className={`text-2xl font-bold ${marginOfSafety > 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
            {marginOfSafety > 0 ? '+' : ''}{marginOfSafety}%
          </div>
        </div>
        
        <div className="mt-4 text-xs text-gray-500 dark:text-gray-400 text-center">
          Margin of safety represents the discount/premium to estimated intrinsic value
        </div>
      </div>
    </div>
  );
};

const EnhancedAnalysisCharts = ({ chartData }) => {
  if (!chartData || chartData.length === 0) {
    return <div className="text-gray-500">No chart data available</div>;
  }

  return (
    <div>
      <h2 className="text-xl font-bold mb-4">Financial Charts</h2>
      
      {chartData.map((chart, index) => {
        switch(chart.type) {
          case 'ValueMetrics':
            return <ValueMetricsChart key={index} data={chart.data} />;
          case 'FinancialPerformance':
            return <FinancialPerformanceChart key={index} labels={chart.labels} datasets={chart.datasets} />;
          case 'ValueComparison':
            return <ValueComparisonChart key={index} data={chart.data} />;
          default:
            return null;
        }
      })}
    </div>
  );
};

const OverallRatingBadge = ({ overallRating }) => {
    if (!overallRating) return null;
    
    const { score, label, recommendation } = overallRating;
    
    // Get text color based on score
    const getScoreColor = (score) => {
      if (score >= 8) return 'text-green-600 dark:text-green-400';
      if (score >= 6) return 'text-green-500 dark:text-green-300';
      if (score >= 5) return 'text-yellow-500 dark:text-yellow-400';
      if (score >= 3) return 'text-orange-500 dark:text-orange-400';
      return 'text-red-600 dark:text-red-400';
    };
    
    // Get recommendation badge color
    const getRecommendationColor = (rec) => {
      switch(rec) {
        case 'Buy': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
        case 'Sell': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
        default: return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
      }
    };
    
    return (
      <div className="mb-6">
        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow">
          <div className="flex flex-col md:flex-row md:items-center justify-between">
            <div className="mb-4 md:mb-0">
              <h3 className="text-lg font-semibold mb-1">Investment Analysis</h3>
              <p className="text-gray-600 dark:text-gray-400">
                Based on Warren Buffett's value investing principles
              </p>
            </div>
            
            <div className="flex items-center space-x-8">
              <div className="text-center">
                <div className={`text-4xl font-bold ${getScoreColor(score)}`}>
                  {score}/10
                </div>
                <div className="text-sm mt-1 font-medium">{label}</div>
              </div>
              
              <div className="text-center">
                <div className={`text-xl font-bold py-2 px-6 rounded-lg ${getRecommendationColor(recommendation)}`}>
                  {recommendation}
                </div>
                <div className="text-sm mt-1 font-medium">Recommendation</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

// Update the export function at the bottom of EnhancedAnalysisVisuals.jsx
export default function EnhancedAnalysisVisuals({ analysis }) {
    if (!analysis) return null;
    
    return (
      <div className="space-y-6">
        <EnhancedAnalysisCharts chartData={analysis.chartData} />
        <OverallRatingBadge overallRating={analysis.overallRating} />
      </div>
    );
  }

===== FILE: frontend/src/components/cards/EnhancedSearchCard.jsx =====

// frontend/src/components/cards/EnhancedSearchCard.jsx
'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { searchCompany } from '@/lib/api/financeApi';

export default function EnhancedSearchCard({ onSelectStock, isLoading }) {
  const [searchQuery, setSearchQuery] = useState('');
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [error, setError] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const searchRef = useRef(null);

  // Close search results when clicking outside
  useEffect(() => {
    function handleClickOutside(event) {
      if (searchRef.current && !searchRef.current.contains(event.target)) {
        setShowResults(false);
      }
    }
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Debounce search query
  useEffect(() => {
    const timerId = setTimeout(() => {
      setDebouncedSearchQuery(searchQuery);
    }, 500);

    return () => {
      clearTimeout(timerId);
    };
  }, [searchQuery]);

  // Use debounced search query to fetch results
  useEffect(() => {
    if (debouncedSearchQuery && debouncedSearchQuery.length >= 2) {
      handleSearch();
    } else {
      setSearchResults([]);
    }
  }, [debouncedSearchQuery]);

  const handleSearch = async () => {
    if (!debouncedSearchQuery || debouncedSearchQuery.length < 2) {
      setError('Please enter at least 2 characters');
      return;
    }
    
    setError('');
    setIsSearching(true);
    
    try {
      const results = await searchCompany(debouncedSearchQuery);
      setSearchResults(results || []);
      setShowResults(true);
    } catch (err) {
      console.error('Error searching for stocks:', err);
      setError('Error searching for stocks. Please try again.');
      setSearchResults([]);
    } finally {
      setIsSearching(false);
    }
  };

  const handleSelectStock = (stock) => {
    setSearchQuery(`${stock.symbol} - ${stock.name}`);
    onSelectStock(stock);
    setShowResults(false);
  };

  return (
    <div className="card" ref={searchRef}>
      <h2 className="text-xl font-semibold mb-4">Search Stock</h2>
      <div className="relative">
        <div className="mb-4">
          <label htmlFor="searchQuery" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Search by Company Name or Ticker
          </label>
          <div className="relative">
            <input
              type="text"
              id="searchQuery"
              className="input pr-10"
              placeholder="e.g. Apple, AAPL, Microsoft"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              onFocus={() => searchQuery.length >= 2 && setShowResults(true)}
            />
            {isSearching && (
              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                <svg className="animate-spin h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </div>
            )}
          </div>
          {error && <p className="mt-1 text-sm text-red-600">{error}</p>}
        </div>

        {/* Search Results Dropdown */}
        {showResults && searchResults.length > 0 && (
          <div className="absolute z-10 mt-1 w-full bg-white dark:bg-gray-800 shadow-lg rounded-md border border-gray-200 dark:border-gray-700 max-h-60 overflow-auto">
            <ul className="py-1">
              {searchResults.map((result) => (
                <li 
                  key={result.symbol}
                  className="px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer flex justify-between items-center"
                  onClick={() => handleSelectStock(result)}
                >
                  <div>
                    <span className="font-semibold">{result.symbol}</span>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{result.name}</p>
                  </div>
                  <span className="text-xs bg-gray-200 dark:bg-gray-600 px-2 py-1 rounded">
                    {result.exchange}
                  </span>
                </li>
              ))}
            </ul>
          </div>
        )}
        
        {showResults && searchResults.length === 0 && !isSearching && searchQuery.length >= 2 && (
          <div className="absolute z-10 mt-1 w-full bg-white dark:bg-gray-800 shadow-lg rounded-md border border-gray-200 dark:border-gray-700 p-4 text-center">
            <p className="text-gray-500 dark:text-gray-400">No results found. Try a different search term.</p>
          </div>
        )}
      </div>
    </div>
  );
}

===== FILE: frontend/src/components/cards/InformationCard.jsx =====

export default function InformationCard({ title, content }) {
    return (
      <div className="card">
        <h2 className="text-xl font-semibold mb-4">{title}</h2>
        <p className="text-gray-700 dark:text-gray-300">{content}</p>
      </div>
    );
  }

===== FILE: frontend/src/components/cards/SearchCard.jsx =====

'use client';

import { useState } from 'react';

export default function SearchCard({ onSearch, isLoading }) {
  const [ticker, setTicker] = useState('');
  const [error, setError] = useState('');

  const handleSearch = async (e) => {
    e.preventDefault();
    
    if (!ticker) {
      setError('Please enter a ticker symbol');
      return;
    }
    
    setError('');
    
    try {
      onSearch({ symbol: ticker.toUpperCase() });
    } catch (err) {
      setError('Error searching for ticker');
      console.error(err);
    }
  };

  return (
    <div className="card">
      <h2 className="text-xl font-semibold mb-4">Search Stock</h2>
      <form onSubmit={handleSearch}>
        <div className="mb-4">
          <label htmlFor="ticker" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Enter Ticker Symbol
          </label>
          <input
            type="text"
            id="ticker"
            className="input"
            placeholder="e.g. AAPL, MSFT, TSLA"
            value={ticker}
            onChange={(e) => setTicker(e.target.value)}
          />
          {error && <p className="mt-1 text-sm text-red-600">{error}</p>}
        </div>
        
        <button
          type="submit"
          className="btn btn-primary w-full"
          disabled={isLoading}
        >
          {isLoading ? (
            <span className="flex items-center justify-center">
              <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Searching...
            </span>
          ) : (
            'Search'
          )}
        </button>
      </form>
    </div>
  );
}

===== FILE: frontend/src/components/cards/ValueSearchCard.jsx =====

'use client';

import { useState } from 'react';

export default function ValueSearchCard({ onAnalyze, isLoading }) {
  const [ticker, setTicker] = useState('');
  const [error, setError] = useState('');

  const handleAnalyze = async (e) => {
    e.preventDefault();
    
    if (!ticker) {
      setError('Please enter a ticker symbol');
      return;
    }
    
    setError('');
    
    try {
      onAnalyze(ticker.toUpperCase());
    } catch (err) {
      setError('Error analyzing ticker');
      console.error(err);
    }
  };

  return (
    <div className="card">
      <h2 className="text-xl font-semibold mb-4">Value Analysis</h2>
      <p className="mb-4 text-gray-700 dark:text-gray-300">
        Enter a ticker symbol to get a value investing analysis based on Warren Buffett's principles.
      </p>
      
      <form onSubmit={handleAnalyze}>
        <div className="mb-4">
          <label htmlFor="ticker" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Enter Ticker Symbol
          </label>
          <input
            type="text"
            id="ticker"
            className="input"
            placeholder="e.g. AAPL, MSFT, TSLA"
            value={ticker}
            onChange={(e) => setTicker(e.target.value)}
          />
          {error && <p className="mt-1 text-sm text-red-600">{error}</p>}
        </div>
        
        <button
          type="submit"
          className="btn btn-primary w-full"
          disabled={isLoading}
        >
          {isLoading ? (
            <span className="flex items-center justify-center">
              <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Analyzing...
            </span>
          ) : (
            'Analyze'
          )}
        </button>
      </form>
    </div>
  );
}

===== FILE: frontend/src/components/charts/BarChart.jsx =====

'use client';

import { useEffect, useState } from 'react';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

export default function BarChart({ data, title, xAxisLabel, yAxisLabel, colors }) {
  const [chartData, setChartData] = useState(null);
  
  useEffect(() => {
    if (!data) return;
    
    // Create the chart data from props
    setChartData({
      labels: data.labels,
      datasets: data.datasets.map((dataset, index) => ({
        label: dataset.label,
        data: dataset.data,
        backgroundColor: colors?.[index] || `rgba(${index * 50}, 99, 255, 0.6)`,
        borderColor: colors?.[index] || `rgba(${index * 50}, 99, 255, 1)`,
        borderWidth: 1,
        ...dataset,
      })),
    });
  }, [data, colors]);

  if (!chartData) return null;

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: !!title,
        text: title,
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            // You can customize the tooltip here
            return `${context.dataset.label}: ${context.formattedValue}`;
          }
        }
      },
    },
    scales: {
      x: {
        title: {
          display: !!xAxisLabel,
          text: xAxisLabel,
        },
        grid: {
          display: false,
        },
      },
      y: {
        title: {
          display: !!yAxisLabel,
          text: yAxisLabel,
        },
        grid: {
          color: 'rgba(0, 0, 0, 0.05)',
        },
      },
    },
  };

  return (
    <div className="w-full h-full">
      <Bar data={chartData} options={options} />
    </div>
  );
}

===== FILE: frontend/src/components/charts/FinancialCharts/BalanceSheet.jsx =====

'use client';

import { useEffect, useState } from 'react';
import BarChart from '@/components/charts/BarChart';

export default function BalanceSheet({ data }) {
  const [chartData, setChartData] = useState(null);

  useEffect(() => {
    if (!data || !data.annualReports) return;

    // Process the data for the chart
    const reports = data.annualReports.slice(0, 5).reverse();
    
    const labels = reports.map(report => {
      const date = new Date(report.fiscalDateEnding);
      return date.getFullYear();
    });

    // Extract the assets and liabilities data
    const totalAssets = reports.map(report => parseFloat(report.totalAssets) / 1000000);
    const totalLiabilities = reports.map(report => parseFloat(report.totalLiabilities) / 1000000);
    const totalEquity = reports.map(report => parseFloat(report.totalShareholderEquity) / 1000000);

    setChartData({
      labels,
      datasets: [
        {
          label: 'Total Assets',
          data: totalAssets,
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
        },
        {
          label: 'Total Liabilities',
          data: totalLiabilities,
          backgroundColor: 'rgba(255, 99, 132, 0.6)',
        },
        {
          label: 'Shareholder Equity',
          data: totalEquity,
          backgroundColor: 'rgba(153, 102, 255, 0.6)',
        },
      ],
    });
  }, [data]);

  if (!chartData) {
    return (
      <div className="flex justify-center items-center h-64">
        <p className="text-gray-500">No balance sheet data available</p>
      </div>
    );
  }

  return (
    <div className="h-64">
      <BarChart
        data={chartData}
        title="Balance Sheet Overview"
        xAxisLabel="Year"
        yAxisLabel="Amount (Millions $)"
      />
    </div>
  );
}

===== FILE: frontend/src/components/charts/FinancialCharts/Cashflow.jsx =====

'use client';

import { useEffect, useState } from 'react';
import BarChart from '@/components/charts/BarChart';

export default function Cashflow({ data }) {
  const [chartData, setChartData] = useState(null);

  useEffect(() => {
    if (!data || !data.annualReports) return;

    // Process the data for the chart
    const reports = data.annualReports.slice(0, 5).reverse();
    
    const labels = reports.map(report => {
      const date = new Date(report.fiscalDateEnding);
      return date.getFullYear();
    });

    // Extract the cash flow data
    const operatingCashflow = reports.map(report => parseFloat(report.operatingCashflow) / 1000000);
    const cashflowFromInvestment = reports.map(report => parseFloat(report.cashflowFromInvestment) / 1000000);
    const cashflowFromFinancing = reports.map(report => parseFloat(report.cashflowFromFinancing) / 1000000);

    setChartData({
      labels,
      datasets: [
        {
          label: 'Operating Cash Flow',
          data: operatingCashflow,
          backgroundColor: 'rgba(46, 204, 113, 0.6)',
        },
        {
          label: 'Investment Cash Flow',
          data: cashflowFromInvestment,
          backgroundColor: 'rgba(52, 152, 219, 0.6)',
        },
        {
          label: 'Financing Cash Flow',
          data: cashflowFromFinancing,
          backgroundColor: 'rgba(155, 89, 182, 0.6)',
        },
      ],
    });
  }, [data]);

  if (!chartData) {
    return (
      <div className="flex justify-center items-center h-64">
        <p className="text-gray-500">No cash flow data available</p>
      </div>
    );
  }

  return (
    <div className="h-64">
      <BarChart
        data={chartData}
        title="Cash Flow Overview"
        xAxisLabel="Year"
        yAxisLabel="Amount (Millions $)"
      />
    </div>
  );
}

===== FILE: frontend/src/components/charts/FinancialCharts/IncomeStatement.jsx =====

'use client';

import { useEffect, useState } from 'react';
import BarChart from '@/components/charts/BarChart';

export default function IncomeStatement({ data }) {
  const [chartData, setChartData] = useState(null);

  useEffect(() => {
    if (!data || !data.annualReports) return;

    // Process the data for the chart
    const reports = data.annualReports.slice(0, 5).reverse();
    
    const labels = reports.map(report => {
      const date = new Date(report.fiscalDateEnding);
      return date.getFullYear();
    });

    // Extract the revenue and income data
    const totalRevenue = reports.map(report => parseFloat(report.totalRevenue) / 1000000);
    const grossProfit = reports.map(report => parseFloat(report.grossProfit) / 1000000);
    const netIncome = reports.map(report => parseFloat(report.netIncome) / 1000000);

    setChartData({
      labels,
      datasets: [
        {
          label: 'Total Revenue',
          data: totalRevenue,
          backgroundColor: 'rgba(54, 162, 235, 0.6)',
        },
        {
          label: 'Gross Profit',
          data: grossProfit,
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
        },
        {
          label: 'Net Income',
          data: netIncome,
          backgroundColor: 'rgba(255, 206, 86, 0.6)',
        },
      ],
    });
  }, [data]);

  if (!chartData) {
    return (
      <div className="flex justify-center items-center h-64">
        <p className="text-gray-500">No income statement data available</p>
      </div>
    );
  }

  return (
    <div className="h-64">
      <BarChart
        data={chartData}
        title="Income Statement Overview"
        xAxisLabel="Year"
        yAxisLabel="Amount (Millions $)"
      />
    </div>
  );
}

===== FILE: frontend/src/components/charts/TimeChart.jsx =====

// frontend/src/components/charts/TimeChart.jsx
'use client';

import { useEffect, useState, useRef } from 'react';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

export default function TimeChart({ symbol, data }) {
  const [chartData, setChartData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const chartRef = useRef(null);

  useEffect(() => {
    // Cleanup previous chart instance if exists
    if (chartRef.current && chartRef.current.chartInstance) {
      chartRef.current.chartInstance.destroy();
      chartRef.current = null;
    }
    
    setLoading(true);
    
    try {
      // If we have data passed in, use it directly
      if (data && Array.isArray(data) && data.length > 0) {
        processChartData(data);
      } else {
        // Otherwise generate mock data (fallback only)
        const mockData = generateMockData();
        processChartData(mockData);
      }
    } catch (err) {
      console.error('Error processing chart data:', err);
      setError('Failed to create chart');
      setLoading(false);
    }
  }, [symbol, data]);

  const processChartData = (stockData) => {
    try {
      if (!stockData || !Array.isArray(stockData) || stockData.length === 0) {
        setChartData(null);
        setLoading(false);
        return;
      }
      
      // Sort by date (oldest to newest)
      const sortedData = [...stockData].sort((a, b) => {
        return new Date(a.date) - new Date(b.date);
      });
      
      const labels = sortedData.map(item => {
        // Format the date as MM/DD
        if (!item.date) return '';
        const date = new Date(item.date);
        return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}`;
      });
      
      const prices = sortedData.map(item => {
        const price = item.close || item.adjClose;
        return price ? parseFloat(price) : null;
      }).filter(price => price !== null);
      
      if (prices.length === 0) {
        setError('No valid price data available');
        setLoading(false);
        return;
      }
      
      setChartData({
        labels,
        datasets: [
          {
            label: `${symbol} Price`,
            data: prices,
            borderColor: 'rgb(14, 165, 233)',
            backgroundColor: 'rgba(14, 165, 233, 0.5)',
            tension: 0.1,
            pointRadius: 1,
            pointHoverRadius: 5,
          },
        ],
      });
    } catch (err) {
      console.error('Error formatting chart data:', err);
      setError('Error processing chart data');
    } finally {
      setLoading(false);
    }
  };

  // Generate mock price data for the chart (only used as fallback)
  const generateMockData = () => {
    const mockData = [];
    const today = new Date();
    let price = 150 + Math.random() * 10;
    
    for (let i = 30; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      
      const change = (Math.random() - 0.48) * 3;
      price += change;
      
      mockData.push({
        date: date.toISOString().split('T')[0],
        open: price - Math.random(),
        high: price + Math.random() * 2,
        low: price - Math.random() * 2,
        close: price,
        volume: Math.floor(Math.random() * 10000000) + 2000000,
      });
    }
    
    return mockData;
  };

  // Effect for cleanup when unmounting
  useEffect(() => {
    return () => {
      if (chartRef.current && chartRef.current.chartInstance) {
        chartRef.current.chartInstance.destroy();
      }
    };
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-full">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center h-full">
        <p className="text-red-500">{error}</p>
      </div>
    );
  }

  if (!chartData) {
    return (
      <div className="flex justify-center items-center h-full">
        <p className="text-gray-500">No chart data available</p>
      </div>
    );
  }

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    devicePixelRatio: 1, // Prevent canvas size issues
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        mode: 'index',
        intersect: false,
        callbacks: {
          label: function(context) {
            return `$${context.raw.toFixed(2)}`;
          }
        }
      },
    },
    scales: {
      x: {
        ticks: {
          maxTicksLimit: 8,
        },
        grid: {
          display: false,
        },
      },
      y: {
        beginAtZero: false,
        grid: {
          color: 'rgba(0, 0, 0, 0.05)',
        },
        ticks: {
          callback: function(value) {
            return '$' + value.toFixed(0);
          }
        }
      },
    },
  };

  return (
    <div style={{ width: '100%', height: '100%', maxHeight: '500px' }}>
      <Line 
        ref={chartRef}
        data={chartData}
        options={options}
      />
    </div>
  );
}

===== FILE: frontend/src/components/dashboard/StockDashboard.jsx =====

// frontend/src/components/dashboard/StockDashboard.jsx
'use client';

import { useState, useEffect } from 'react';
import EnhancedSearchCard from '@/components/cards/EnhancedSearchCard';
import TimeChart from '@/components/charts/TimeChart';
import AIAnalyst from '@/components/analysis/AIAnalyst';
import EnhancedAIAnalyst from '@/components/analysis/EnhancedAIAnalyst';
import { getQuote, getCompanyOverview, getValueAnalysis, getHistoricalData, getFinancials } from '@/lib/api/financeApi';

export default function StockDashboard() {
  const [selectedStock, setSelectedStock] = useState(null);
  const [stockQuote, setStockQuote] = useState(null);
  const [companyOverview, setCompanyOverview] = useState(null);
  const [valueAnalysis, setValueAnalysis] = useState(null);
  const [newsData, setNewsData] = useState(null);
  const [historicalData, setHistoricalData] = useState(null);
  const [financials, setFinancials] = useState({
    income: null,
    balance: null,
    cashflow: null
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (selectedStock && selectedStock.symbol) {
      fetchStockData(selectedStock.symbol);
    }
  }, [selectedStock]);

  const fetchStockData = async (symbol) => {
    if (!symbol) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      // Fetch all required data in parallel
      const results = await Promise.all([
        getQuote(symbol).catch(err => {
          console.error(`Error fetching quote: ${err.message}`);
          return null;
        }),
        getCompanyOverview(symbol).catch(err => {
          console.error(`Error fetching overview: ${err.message}`);
          return null;
        }),
        getValueAnalysis(symbol).catch(err => {
          console.error(`Error fetching value analysis: ${err.message}`);
          return null;
        }),
        getHistoricalData(symbol, '1d', '1mo').catch(err => {
          console.error(`Error fetching historical data: ${err.message}`);
          return null;
        }),
        getFinancials(symbol, 'income').catch(err => {
          console.error(`Error fetching income statement: ${err.message}`);
          return null;
        }),
        getFinancials(symbol, 'balance').catch(err => {
          console.error(`Error fetching balance sheet: ${err.message}`);
          return null;
        }),
        getFinancials(symbol, 'cashflow').catch(err => {
          console.error(`Error fetching cash flow: ${err.message}`);
          return null;
        })
      ]);
      
      const [quoteData, overviewData, analysisData, historical, incomeData, balanceData, cashflowData] = results;
      
      setStockQuote(quoteData);
      setCompanyOverview(overviewData);
      setValueAnalysis(analysisData);
      setHistoricalData(historical);
      setFinancials({
        income: incomeData,
        balance: balanceData,
        cashflow: cashflowData
      });
      
      // Mock news data (in a real app, you would fetch this from a news API)
      setNewsData({
        articles: [
          { title: `Latest news about ${symbol}`, date: new Date().toISOString() }
        ]
      });
    } catch (err) {
      console.error('Error fetching stock data:', err);
      setError('Failed to fetch stock data. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSelectStock = (stock) => {
    if (stock && typeof stock === 'object') {
      setSelectedStock(stock);
    } else {
      console.error('Invalid stock data provided to handleSelectStock');
    }
  };

  return (
    <div className="space-y-6">
      {/* Understanding Value Investing Box - Improved Positioning and Design */}
      <section className="card max-w-full mx-auto mb-8 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-900 border-l-4 border-blue-500 dark:border-blue-700">
        <h2 className="text-2xl font-semibold mb-4">Understanding Value Investing</h2>
        <div className="flex flex-col md:flex-row gap-6">
          <div className="flex-1">
            <p className="mb-4">
              Value investing is an investment strategy focused on buying securities that appear underpriced compared to their intrinsic value.
              This approach, pioneered by Benjamin Graham and practiced successfully by Warren Buffett, emphasizes fundamental analysis
              and maintaining a margin of safety.
            </p>
            <blockquote className="border-l-4 border-blue-500 pl-4 italic my-4 text-gray-700 dark:text-gray-300">
              "Price is what you pay. Value is what you get." - Warren Buffett
            </blockquote>
          </div>
          <div className="flex-1">
            <h3 className="text-lg font-semibold mb-2">Key Value Metrics</h3>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="font-semibold mb-1">P/E Ratio</p>
                <p className="text-sm text-gray-700 dark:text-gray-300">
                  Buffett looks for P/E &lt; 15, indicating potential undervaluation
                </p>
              </div>
              <div>
                <p className="font-semibold mb-1">P/B Ratio</p>
                <p className="text-sm text-gray-700 dark:text-gray-300">
                  P/B &lt; 1.5 is attractive, suggesting possible discount to book value
                </p>
              </div>
              <div>
                <p className="font-semibold mb-1">Return on Equity</p>
                <p className="text-sm text-gray-700 dark:text-gray-300">
                  Buffett seeks ROE &gt; 15%, showing effective use of capital
                </p>
              </div>
              <div>
                <p className="font-semibold mb-1">Debt to Equity</p>
                <p className="text-sm text-gray-700 dark:text-gray-300">
                  Buffett prefers D/E &lt; 0.5, indicating financial stability
                </p>
              </div>
            </div>
          </div>
        </div>
      </section>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-1">
          <EnhancedSearchCard
            onSelectStock={handleSelectStock}
            isLoading={isLoading}
          />
        </div>
        
        <div className="md:col-span-2">
          {isLoading ? (
            <div className="card h-full flex justify-center items-center p-12">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500"></div>
            </div>
          ) : selectedStock && stockQuote ? (
            <div className="card h-full">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h2 className="text-2xl font-bold">{selectedStock.symbol}</h2>
                  <p className="text-gray-600 dark:text-gray-400">{selectedStock.name || 'N/A'}</p>
                </div>
                <div className="text-right">
                  <div className="text-3xl font-bold">${stockQuote.price.toFixed(2)}</div>
                  <div className={`text-lg ${stockQuote.change >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>
                    {stockQuote.change >= 0 ? '+' : ''}{stockQuote.change.toFixed(2)} ({stockQuote.changePercent.toFixed(2)}%)
                  </div>
                </div>
              </div>
              
              <div className="h-64 mb-4">
                <TimeChart symbol={selectedStock.symbol} data={historicalData} />
              </div>
              
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                <div>
                  <p className="text-sm text-gray-500 dark:text-gray-400">Open</p>
                  <p className="font-semibold">${stockQuote.open?.toFixed(2) || 'N/A'}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 dark:text-gray-400">Previous Close</p>
                  <p className="font-semibold">${stockQuote.previousClose?.toFixed(2) || 'N/A'}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 dark:text-gray-400">Day's Range</p>
                  <p className="font-semibold">
                    {stockQuote.low && stockQuote.high 
                      ? `$${stockQuote.low.toFixed(2)} - $${stockQuote.high.toFixed(2)}`
                      : 'N/A'}
                  </p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 dark:text-gray-400">Volume</p>
                  <p className="font-semibold">{stockQuote.volume?.toLocaleString() || 'N/A'}</p>
                </div>
              </div>
            </div>
          ) : (
            <div className="card h-full flex items-center justify-center p-12">
              <p className="text-gray-500 dark:text-gray-400 text-center">
                Search and select a stock to view detailed information
              </p>
            </div>
          )}
        </div>
      </div>
      
      {selectedStock && companyOverview && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="card">
            <h3 className="text-xl font-semibold mb-4">Company Overview</h3>
            
            <div className="mb-4">
              <p className="text-gray-700 dark:text-gray-300">
                {companyOverview.Description || 'No company description available.'}
              </p>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Sector</p>
                <p className="font-semibold">{companyOverview.Sector || 'N/A'}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Industry</p>
                <p className="font-semibold">{companyOverview.Industry || 'N/A'}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Market Cap</p>
                <p className="font-semibold">
                  {companyOverview.MarketCapitalization 
                    ? `$${(companyOverview.MarketCapitalization / 1000000000).toFixed(2)}B` 
                    : 'N/A'}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">P/E Ratio</p>
                <p className="font-semibold">{companyOverview.PERatio || 'N/A'}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">EPS</p>
                <p className="font-semibold">
                  {companyOverview.EPS ? `$${companyOverview.EPS}` : 'N/A'}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">Dividend Yield</p>
                <p className="font-semibold">
                  {companyOverview.DividendYield 
                    ? `${(companyOverview.DividendYield * 100).toFixed(2)}%` 
                    : 'N/A'}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">52 Week High</p>
                <p className="font-semibold">
                  {companyOverview['52WeekHigh'] ? `$${companyOverview['52WeekHigh']}` : 'N/A'}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-500 dark:text-gray-400">52 Week Low</p>
                <p className="font-semibold">
                  {companyOverview['52WeekLow'] ? `$${companyOverview['52WeekLow']}` : 'N/A'}
                </p>
              </div>
            </div>
          </div>
          
          <div className="card">
            <h3 className="text-xl font-semibold mb-4">Value Investment Metrics</h3>
            
            {valueAnalysis ? (
              <>
                <div className="mb-6">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-gray-700 dark:text-gray-300">Value Score</span>
                    <span className={`font-bold text-lg ${
                      valueAnalysis.valueScore >= 7 ? 'text-green-600 dark:text-green-400' : 
                      valueAnalysis.valueScore >= 4 ? 'text-yellow-600 dark:text-yellow-400' : 
                      'text-red-600 dark:text-red-400'
                    }`}>
                      {valueAnalysis.valueScore}/10
                    </span>
                  </div>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                    <div 
                      className={`h-2.5 rounded-full ${
                        valueAnalysis.valueScore >= 7 ? 'bg-green-600' : 
                        valueAnalysis.valueScore >= 4 ? 'bg-yellow-500' : 'bg-red-600'
                      }`}
                      style={{ width: `${valueAnalysis.valueScore * 10}%` }}
                    ></div>
                  </div>
                  <p className="mt-2 text-right text-sm text-gray-600 dark:text-gray-400">
                    {valueAnalysis.valueScore >= 7 ? 'Bullish' : 
                     valueAnalysis.valueScore >= 4 ? 'Neutral' : 'Bearish'}
                  </p>
                </div>
                
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div>
                    <p className="text-sm text-gray-500 dark:text-gray-400">Current Price</p>
                    <p className="font-semibold">
                      {valueAnalysis.currentPrice 
                        ? `$${valueAnalysis.currentPrice.toFixed(2)}` 
                        : 'N/A'}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 dark:text-gray-400">Intrinsic Value</p>
                    <p className="font-semibold">
                      {valueAnalysis.intrinsicValue 
                        ? `$${valueAnalysis.intrinsicValue.toFixed(2)}` 
                        : 'N/A'}
                    </p>
                  </div>
                  
                  {valueAnalysis.metrics && (
                    <>
                      <div>
                        <p className="text-sm text-gray-500 dark:text-gray-400">P/E Ratio</p>
                        <p className={`font-semibold ${
                          valueAnalysis.metrics.pe < 15 ? 'text-green-600 dark:text-green-400' :
                          valueAnalysis.metrics.pe < 25 ? 'text-yellow-600 dark:text-yellow-400' :
                          'text-red-600 dark:text-red-400'
                        }`}>
                          {valueAnalysis.metrics.pe?.toFixed(2) || 'N/A'}
                        </p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-500 dark:text-gray-400">P/B Ratio</p>
                        <p className={`font-semibold ${
                          valueAnalysis.metrics.pb < 1.5 ? 'text-green-600 dark:text-green-400' :
                          valueAnalysis.metrics.pb < 3 ? 'text-yellow-600 dark:text-yellow-400' :
                          'text-red-600 dark:text-red-400'
                        }`}>
                          {valueAnalysis.metrics.pb?.toFixed(2) || 'N/A'}
                        </p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-500 dark:text-gray-400">Return on Equity</p>
                        <p className={`font-semibold ${
                          valueAnalysis.metrics.roe > 0.15 ? 'text-green-600 dark:text-green-400' :
                          valueAnalysis.metrics.roe > 0.10 ? 'text-yellow-600 dark:text-yellow-400' :
                          'text-red-600 dark:text-red-400'
                        }`}>
                          {valueAnalysis.metrics.roe 
                            ? `${(valueAnalysis.metrics.roe * 100).toFixed(2)}%` 
                            : 'N/A'}
                        </p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-500 dark:text-gray-400">Debt to Equity</p>
                        <p className={`font-semibold ${
                          valueAnalysis.metrics.debtToEquity < 0.5 ? 'text-green-600 dark:text-green-400' :
                          valueAnalysis.metrics.debtToEquity < 1 ? 'text-yellow-600 dark:text-yellow-400' :
                          'text-red-600 dark:text-red-400'
                        }`}>
                          {valueAnalysis.metrics.debtToEquity?.toFixed(2) || 'N/A'}
                        </p>
                      </div>
                    </>
                  )}
                </div>
              </>
            ) : (
              <p className="text-gray-500 dark:text-gray-400">
                Value analysis data not available
              </p>
            )}
          </div>
        </div>
      )}
      
      {selectedStock && (
        <>
          <AIAnalyst 
            stockData={selectedStock}
            newsData={newsData}
            valueAnalysis={valueAnalysis}
          />
          
          <EnhancedAIAnalyst 
            stockData={selectedStock}
            companyOverview={companyOverview}
            financials={financials}
            valueAnalysis={valueAnalysis}
          />
        </>
      )}
    </div>
  );
}

===== FILE: frontend/src/components/layout/Footer.jsx =====

// frontend/src/components/layout/Footer.jsx
import Link from 'next/link';

export default function Footer() {
  return (
    <footer className="bg-gray-800 dark:bg-gray-900 text-white py-8">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div>
            <h3 className="text-xl font-semibold mb-4">Value Investing</h3>
            <p className="text-gray-300 dark:text-gray-400">
              A platform for value investors to analyze stocks based on fundamental principles.
            </p>
          </div>
          
          <div>
            <h3 className="text-xl font-semibold mb-4">Quick Links</h3>
            <ul className="space-y-2">
              <li>
                <Link href="/" className="text-gray-300 dark:text-gray-400 hover:text-white">
                  Home
                </Link>
              </li>
              <li>
                <Link href="/learn" className="text-gray-300 dark:text-gray-400 hover:text-white">
                  Learn
                </Link>
              </li>
            </ul>
          </div>
          
          <div>
            <h3 className="text-xl font-semibold mb-4">Learning Paths</h3>
            <ul className="space-y-2">
              <li>
                <Link href="/learn?tab=beginner" className="text-gray-300 dark:text-gray-400 hover:text-white">
                  Beginner
                </Link>
              </li>
              <li>
                <Link href="/learn?tab=intermediate" className="text-gray-300 dark:text-gray-400 hover:text-white">
                  Intermediate
                </Link>
              </li>
              <li>
                <Link href="/learn?tab=advanced" className="text-gray-300 dark:text-gray-400 hover:text-white">
                  Advanced
                </Link>
              </li>
            </ul>
          </div>
        </div>
        
        <div className="mt-8 pt-8 border-t border-gray-700 text-center text-gray-400 dark:text-gray-500">
          <p>© {new Date().getFullYear()} | Open Source Value Investing Portfolio Project</p>
          <p className="mt-2 text-sm">
            Data provided by Yahoo Finance API. This website is for educational purposes only.
          </p>
        </div>
      </div>
    </footer>
  );
}

===== FILE: frontend/src/components/layout/Navbar.jsx =====

// frontend/src/components/layout/Navbar.jsx
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useTheme } from 'next-themes';

export default function Navbar() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  // After mounting, we can safely show the UI as we now have access to the theme
  useEffect(() => {
    setMounted(true);
  }, []);

  // Toggle dark mode
  const toggleDarkMode = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark');
  };

  return (
    <nav className="bg-blue-600 dark:bg-gray-900 shadow-md">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center py-4">
          <div className="flex items-center">
            <Link 
              href="/" 
              className="text-xl font-bold text-white hover:text-blue-100 dark:hover:text-blue-200"
            >
              Value Investing
            </Link>
          </div>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-6">
            <Link 
              href="/" 
              className="text-white hover:text-blue-100 dark:hover:text-blue-200"
            >
              Home
            </Link>
            <Link 
              href="/learn" 
              className="text-white hover:text-blue-100 dark:hover:text-blue-200"
            >
              Learn
            </Link>
            
            {/* Dark Mode Toggle */}
            <button
              onClick={toggleDarkMode}
              className="p-2 rounded-md bg-blue-700 dark:bg-gray-700 hover:bg-blue-800 dark:hover:bg-gray-600 focus:outline-none text-white"
              aria-label="Toggle Dark Mode"
            >
              {mounted && (
                theme === 'dark' ? (
                  // Sun icon for light mode
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z" />
                  </svg>
                ) : (
                  // Moon icon for dark mode
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z" />
                  </svg>
                )
              )}
            </button>
          </div>

          {/* Mobile menu button */}
          <div className="md:hidden flex items-center space-x-2">
            {/* Dark Mode Toggle - Mobile */}
            <button
              onClick={toggleDarkMode}
              className="p-2 rounded-md bg-blue-700 dark:bg-gray-700 hover:bg-blue-800 dark:hover:bg-gray-600 focus:outline-none text-white"
              aria-label="Toggle Dark Mode"
            >
              {mounted && (
                theme === 'dark' ? (
                  // Sun icon for light mode
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z" />
                  </svg>
                ) : (
                  // Moon icon for dark mode
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z" />
                  </svg>
                )
              )}
            </button>
            
            <button
              className="text-white focus:outline-none"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
            >
              <svg
                className="h-6 w-6"
                fill="none"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                {isMenuOpen ? (
                  <path d="M6 18L18 6M6 6l12 12" />
                ) : (
                  <path d="M4 6h16M4 12h16m-7 6h7" />
                )}
              </svg>
            </button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden py-2 pb-4">
            <Link
              href="/"
              className="block py-2 text-white hover:text-blue-100 dark:hover:text-blue-200"
              onClick={() => setIsMenuOpen(false)}
            >
              Home
            </Link>
            <Link
              href="/learn"
              className="block py-2 text-white hover:text-blue-100 dark:hover:text-blue-200"
              onClick={() => setIsMenuOpen(false)}
            >
              Learn
            </Link>
          </div>
        )}
      </div>
    </nav>
  );
}

===== FILE: frontend/src/components/learn/ComingSoonPlaceholder.jsx =====

// frontend/src/components/learn/ComingSoonPlaceholder.jsx
'use client';

import { CalendarIcon, BookOpenIcon } from '@heroicons/react/24/outline';

export default function ComingSoonPlaceholder({ level }) {
  return (
    <div className="flex flex-col items-center justify-center py-16 px-4">
      <div className="text-center mb-8">
        <div className="mb-4 inline-flex items-center justify-center w-16 h-16 rounded-full bg-blue-100 dark:bg-blue-900/30">
          <CalendarIcon className="h-8 w-8 text-blue-600 dark:text-blue-400" />
        </div>
        <h2 className="text-2xl font-bold mb-2">
          {level.charAt(0).toUpperCase() + level.slice(1)} Content Coming Soon
        </h2>
        <p className="text-gray-600 dark:text-gray-400 max-w-md mx-auto">
          We're currently developing in-depth {level} lessons to help you master value investing concepts.
        </p>
      </div>
      
      <div className="w-full max-w-2xl bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border border-gray-200 dark:border-gray-700">
        <div className="flex items-start mb-4">
          <div className="flex-shrink-0">
            <BookOpenIcon className="h-6 w-6 text-blue-600 dark:text-blue-400" />
          </div>
          <div className="ml-4">
            <h3 className="text-lg font-semibold">What to expect</h3>
            <p className="mt-1 text-gray-600 dark:text-gray-400">
              Our {level} section will cover advanced concepts including:
            </p>
            <ul className="mt-2 space-y-1 list-disc list-inside text-gray-600 dark:text-gray-400">
              {level === 'intermediate' ? (
                <>
                  <li>Discounted Cash Flow Analysis</li>
                  <li>Competitive Advantage Analysis</li>
                  <li>Financial Ratio Deep Dives</li>
                  <li>Industry-Specific Valuation Techniques</li>
                </>
              ) : (
                <>
                  <li>Special Situations Investing</li>
                  <li>Advanced Portfolio Management</li>
                  <li>Market Psychology and Behavioral Finance</li>
                  <li>Complex Valuation Models</li>
                </>
              )}
            </ul>
          </div>
        </div>
        
        <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
          <p className="text-sm text-gray-500 dark:text-gray-400">
            In the meantime, we recommend exploring our <a href="/learn?tab=beginner" className="text-blue-600 dark:text-blue-400 hover:underline">beginner lessons</a> to build a solid foundation.
          </p>
        </div>
      </div>
    </div>
  );
}

===== FILE: frontend/src/components/learn/EducationalContent.jsx =====

// frontend/src/components/learn/MarkdownContent.jsx
'use client';

import { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import Link from 'next/link';
import Image from 'next/image';
import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';

// Custom renderer for images in markdown
const MarkdownImage = ({ src, alt }) => {
  // Ensure image paths are handled correctly
  const imageSrc = src.startsWith('/') ? src : `/${src}`;
  
  return (
    <div className="my-8 flex justify-center">
      <div className="relative w-full max-w-2xl rounded-lg overflow-hidden shadow-lg">
        <Image 
          src={imageSrc}
          alt={alt || "Educational image"}
          width={800}
          height={500}
          className="object-contain"
        />
      </div>
    </div>
  );
};

export default function MarkdownContent({ content, slug, level, relatedArticles = [] }) {
  const [tableOfContents, setTableOfContents] = useState([]);
  
  // Extract headers for table of contents
  useEffect(() => {
    if (content) {
      const headers = [];
      const lines = content.split('\n');
      
      lines.forEach(line => {
        if (line.startsWith('## ')) {
          const title = line.replace('## ', '');
          const id = title.toLowerCase().replace(/[^\w\s]/g, '').replace(/\s+/g, '-');
          headers.push({ title, id });
        }
      });
      
      setTableOfContents(headers);
    }
  }, [content]);

  // Handle scrolling to anchors with offset for fixed header
  const scrollToSection = (id) => {
    // Log for debugging
    console.log(`Attempting to scroll to section with id: ${id}`);
    
    const element = document.getElementById(id);
    if (element) {
      console.log(`Found element with id: ${id}`);
      
      // Add a longer delay to ensure the DOM is fully rendered and calculated
      setTimeout(() => {
        try {
          const headerOffset = 100; // Adjust based on your header height
          
          // Get current scroll position
          const currentPosition = window.pageYOffset || document.documentElement.scrollTop;
          
          // Calculate element position relative to the document
          const elementPosition = element.getBoundingClientRect().top + currentPosition;
          
          // Calculate final position with offset
          const offsetPosition = elementPosition - headerOffset;
          
          console.log(`Scrolling to position: ${offsetPosition}`);
          
          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        } catch (error) {
          console.error('Error scrolling to section:', error);
        }
      }, 200); // Increased timeout for better reliability
    } else {
      console.warn(`Element with id "${id}" not found`);
    }
  };

  if (!content) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Generate previous and next article links
  const currentIndex = relatedArticles.findIndex(article => article.slug === slug);
  const prevArticle = currentIndex > 0 ? relatedArticles[currentIndex - 1] : null;
  const nextArticle = currentIndex < relatedArticles.length - 1 ? relatedArticles[currentIndex + 1] : null;

  return (
    <div className="relative max-w-5xl mx-auto">
      {/* Main content layout - using CSS Grid for better layout control */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
        {/* Main content area - takes 3/4 of space on large screens */}
        <div className="lg:col-span-3">
          <div className="prose dark:prose-invert max-w-none">
            <ReactMarkdown
              components={{
                h2: ({ node, ...props }) => {
                  const id = props.children[0].toLowerCase().replace(/[^\w\s]/g, '').replace(/\s+/g, '-');
                  return <h2 id={id} className="pt-4 mt-8 border-t border-gray-200 dark:border-gray-700" {...props} />;
                },
                img: ({ node, ...props }) => <MarkdownImage {...props} />,
                a: ({ node, ...props }) => <a className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300" {...props} target="_blank" rel="noopener noreferrer" />,
                table: ({ node, ...props }) => <div className="overflow-x-auto"><table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700" {...props} /></div>,
                thead: ({ node, ...props }) => <thead className="bg-gray-50 dark:bg-gray-800" {...props} />,
                th: ({ node, ...props }) => <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider" {...props} />,
                td: ({ node, ...props }) => <td className="px-6 py-4 whitespace-nowrap text-sm" {...props} />,
                // Add these new components for list rendering
                ul: ({ node, ...props }) => <ul className="list-disc pl-5 my-4 space-y-2" {...props} />,
                ol: ({ node, ...props }) => <ol className="list-decimal pl-5 my-4 space-y-2" {...props} />,
                li: ({ node, ...props }) => <li className="mb-1" {...props} />
              }}
            >
              {content}
            </ReactMarkdown>

            {/* Navigation between articles */}
            <div className="mt-12 pt-6 border-t border-gray-200 dark:border-gray-700 grid grid-cols-2 gap-4">
              <div>
                {prevArticle && (
                  <Link 
                    href={`/learn/${level}/${prevArticle.slug}`}
                    className="inline-flex items-center text-blue-600 hover:underline"
                  >
                    <ChevronLeftIcon className="h-5 w-5 mr-1" />
                    <span>Previous:<br />{prevArticle.title}</span>
                  </Link>
                )}
              </div>
              <div className="text-right">
                {nextArticle && (
                  <Link 
                    href={`/learn/${level}/${nextArticle.slug}`}
                    className="inline-flex items-center justify-end text-blue-600 hover:underline"
                  >
                    <span>Next:<br />{nextArticle.title}</span>
                    <ChevronRightIcon className="h-5 w-5 ml-1" />
                  </Link>
                )}
              </div>
            </div>

            {/* Related articles */}
            <div className="mt-12 pt-6 border-t border-gray-200 dark:border-gray-700">
              <h3 className="text-xl font-semibold mb-4">Related Resources</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {relatedArticles
                  .filter(article => article.slug !== slug)
                  .slice(0, 4)
                  .map(article => (
                    <Link 
                      key={article.slug}
                      href={`/learn/${level}/${article.slug}`}
                      className="card hover:shadow-lg transition-shadow duration-300 p-4"
                    >
                      <h4 className="text-lg font-semibold">{article.title}</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{article.description}</p>
                    </Link>
                  ))
                }
              </div>
            </div>
          </div>
        </div>

        {/* Table of Contents - takes 1/4 of space on large screens */}
        {tableOfContents.length > 2 && (
          <div className="lg:col-span-1">
            <div className="sticky top-24 bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
              <h4 className="text-lg font-semibold mb-2">Contents</h4>
              <ul className="space-y-2">
                {tableOfContents.map((header) => (
                  <li key={header.id}>
                    <button
                      onClick={() => scrollToSection(header.id)}
                      className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-left w-full text-sm"
                    >
                      {header.title}
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>

      {/* Mobile Table of Contents */}
      {tableOfContents.length > 2 && (
        <div className="lg:hidden mt-8 mb-8 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
          <h4 className="text-lg font-semibold mb-2">Contents</h4>
          <ul className="space-y-2">
            {tableOfContents.map((header) => (
              <li key={header.id}>
                <button
                  onClick={() => scrollToSection(header.id)}
                  className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-left w-full"
                >
                  {header.title}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

===== FILE: frontend/src/components/learn/LearningNavigation.jsx =====

// frontend/src/components/learn/LearningNavigation.jsx
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { getArticlesByLevel } from '@/lib/learn/contentService';
import { ChevronRightIcon } from '@heroicons/react/24/solid';

export default function LearningNavigation({ level, currentSlug }) {
  const [articles, setArticles] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const pathname = usePathname();
  
  useEffect(() => {
    const fetchArticles = async () => {
      setIsLoading(true);
      try {
        const fetchedArticles = await getArticlesByLevel(level);
        setArticles(fetchedArticles);
      } catch (error) {
        console.error('Error fetching articles:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchArticles();
  }, [level]);

  if (isLoading) {
    return (
      <div className="p-4 rounded-lg border border-gray-200 dark:border-gray-700">
        <div className="animate-pulse space-y-3">
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-4">
      <h3 className="text-lg font-semibold mb-3 capitalize">{level} Level Articles</h3>
      <ul className="space-y-2">
        {articles.map((article) => {
          const isActive = article.slug === currentSlug;
          return (
            <li key={article.slug}>
              <Link 
                href={`/learn/${level}/${article.slug}`}
                className={`flex items-center px-3 py-2 rounded-md transition-colors ${
                  isActive 
                    ? 'bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 font-medium' 
                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'
                }`}
              >
                {isActive && <ChevronRightIcon className="w-4 h-4 mr-2 flex-shrink-0" />}
                <span className={isActive ? '' : 'ml-6'}>{article.title}</span>
              </Link>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

===== FILE: frontend/src/components/learn/MarkdownContent.jsx =====

// frontend/src/components/learn/MarkdownContent.jsx
'use client';

import { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import Link from 'next/link';
import Image from 'next/image';
import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';

// Custom renderer for images in markdown
const MarkdownImage = ({ src, alt }) => {
  // Ensure image paths are handled correctly
  const imageSrc = src.startsWith('/') ? src : `/${src}`;
  
  return (
    <div className="my-8 flex justify-center">
      <div className="relative w-full max-w-2xl rounded-lg overflow-hidden shadow-lg">
        <Image 
          src={imageSrc}
          alt={alt || "Educational image"}
          width={800}
          height={500}
          className="object-contain"
        />
      </div>
    </div>
  );
};

export default function MarkdownContent({ content, slug, level, relatedArticles = [] }) {
  const [tableOfContents, setTableOfContents] = useState([]);
  
  // Extract headers for table of contents
  useEffect(() => {
    if (content) {
      const headers = [];
      const lines = content.split('\n');
      
      lines.forEach(line => {
        if (line.startsWith('## ')) {
          const title = line.replace('## ', '');
          const id = title.toLowerCase().replace(/[^\w\s]/g, '').replace(/\s+/g, '-');
          headers.push({ title, id });
        }
      });
      
      setTableOfContents(headers);
    }
  }, [content]);

  // Handle scrolling to anchors with offset for fixed header
  const scrollToSection = (id) => {
    const element = document.getElementById(id);
    if (element) {
      // Add a delay to ensure the DOM is fully rendered
      setTimeout(() => {
        const headerOffset = 100; // Adjust based on your header height
        const elementPosition = element.getBoundingClientRect().top;
        const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
        
        window.scrollTo({
          top: offsetPosition,
          behavior: 'smooth'
        });
      }, 100);
    }
  };

  if (!content) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Generate previous and next article links
  const currentIndex = relatedArticles.findIndex(article => article.slug === slug);
  const prevArticle = currentIndex > 0 ? relatedArticles[currentIndex - 1] : null;
  const nextArticle = currentIndex < relatedArticles.length - 1 ? relatedArticles[currentIndex + 1] : null;

  return (
    <div className="relative max-w-5xl mx-auto">
      {/* Main content layout - using CSS Grid for better layout control */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
        {/* Main content area - takes 3/4 of space on large screens */}
        <div className="lg:col-span-3">
          <div className="prose dark:prose-invert max-w-none">
            <ReactMarkdown
              components={{
                h2: ({ node, ...props }) => {
                  const id = props.children[0].toLowerCase().replace(/[^\w\s]/g, '').replace(/\s+/g, '-');
                  return <h2 id={id} className="pt-4 mt-8 border-t border-gray-200 dark:border-gray-700" {...props} />;
                },
                img: ({ node, ...props }) => <MarkdownImage {...props} />,
                a: ({ node, ...props }) => <a className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300" {...props} target="_blank" rel="noopener noreferrer" />,
                table: ({ node, ...props }) => <div className="overflow-x-auto"><table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700" {...props} /></div>,
                thead: ({ node, ...props }) => <thead className="bg-gray-50 dark:bg-gray-800" {...props} />,
                th: ({ node, ...props }) => <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider" {...props} />,
                td: ({ node, ...props }) => <td className="px-6 py-4 whitespace-nowrap text-sm" {...props} />,
              }}
            >
              {content}
            </ReactMarkdown>

            {/* Navigation between articles */}
            <div className="mt-12 pt-6 border-t border-gray-200 dark:border-gray-700 grid grid-cols-2 gap-4">
              <div>
                {prevArticle && (
                  <Link 
                    href={`/learn/${level}/${prevArticle.slug}`}
                    className="inline-flex items-center text-blue-600 hover:underline"
                  >
                    <ChevronLeftIcon className="h-5 w-5 mr-1" />
                    <span>Previous:<br />{prevArticle.title}</span>
                  </Link>
                )}
              </div>
              <div className="text-right">
                {nextArticle && (
                  <Link 
                    href={`/learn/${level}/${nextArticle.slug}`}
                    className="inline-flex items-center justify-end text-blue-600 hover:underline"
                  >
                    <span>Next:<br />{nextArticle.title}</span>
                    <ChevronRightIcon className="h-5 w-5 ml-1" />
                  </Link>
                )}
              </div>
            </div>

            {/* Related articles */}
            <div className="mt-12 pt-6 border-t border-gray-200 dark:border-gray-700">
              <h3 className="text-xl font-semibold mb-4">Related Resources</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {relatedArticles
                  .filter(article => article.slug !== slug)
                  .slice(0, 4)
                  .map(article => (
                    <Link 
                      key={article.slug}
                      href={`/learn/${level}/${article.slug}`}
                      className="card hover:shadow-lg transition-shadow duration-300 p-4"
                    >
                      <h4 className="text-lg font-semibold">{article.title}</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{article.description}</p>
                    </Link>
                  ))
                }
              </div>
            </div>
          </div>
        </div>

        {/* Table of Contents - takes 1/4 of space on large screens */}
        {tableOfContents.length > 2 && (
          <div className="lg:col-span-1">
            <div className="sticky top-24 bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
              <h4 className="text-lg font-semibold mb-2">Contents</h4>
              <ul className="space-y-2">
                {tableOfContents.map((header) => (
                  <li key={header.id}>
                    <button
                      onClick={() => scrollToSection(header.id)}
                      className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-left w-full text-sm"
                    >
                      {header.title}
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>

      {/* Mobile Table of Contents */}
      {tableOfContents.length > 2 && (
        <div className="lg:hidden mt-8 mb-8 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
          <h4 className="text-lg font-semibold mb-2">Contents</h4>
          <ul className="space-y-2">
            {tableOfContents.map((header) => (
              <li key={header.id}>
                <button
                  onClick={() => scrollToSection(header.id)}
                  className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-left w-full"
                >
                  {header.title}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

===== FILE: frontend/src/components/results/HomePageResults.jsx =====

'use client';

import { useEffect, useState } from 'react';

export default function HomePageResults({ stockData }) {
  const [quoteData, setQuoteData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      if (!stockData) return;
      
      setLoading(true);
      
      try {
        // This would be replaced with actual API call in production
        // Mocked data for development
        const mockData = {
          symbol: stockData.symbol,
          price: 150.25,
          change: 2.35,
          changePercent: 1.58,
          open: 148.20,
          high: 151.45,
          low: 147.80,
          volume: 3547892,
          latestTradingDay: new Date().toISOString().split('T')[0],
          previousClose: 147.90
        };
        
        // Simulate API delay
        setTimeout(() => {
          setQuoteData(mockData);
          setLoading(false);
        }, 500);
      } catch (err) {
        console.error('Error fetching quote data:', err);
        setError('Failed to fetch stock data');
        setLoading(false);
      }
    };

    fetchData();
  }, [stockData]);

  if (loading) {
    return (
      <div className="card flex justify-center items-center p-12">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="card bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900/30">
        <h3 className="text-red-600 dark:text-red-400 text-lg font-semibold">Error</h3>
        <p className="text-red-600 dark:text-red-400">{error}</p>
      </div>
    );
  }

  if (!quoteData) return null;

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">{quoteData.symbol} Stock Overview</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="card">
          <h3 className="text-xl font-semibold mb-4">Stock Quote</h3>
          
          <div className="flex items-baseline mb-4">
            <span className="text-3xl font-bold">${quoteData.price.toFixed(2)}</span>
            <span className={`ml-2 text-lg ${quoteData.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {quoteData.change >= 0 ? '+' : ''}{quoteData.change.toFixed(2)} ({quoteData.changePercent.toFixed(2)}%)
            </span>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Open</p>
              <p className="font-semibold">${quoteData.open.toFixed(2)}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Previous Close</p>
              <p className="font-semibold">${quoteData.previousClose.toFixed(2)}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Day's Range</p>
              <p className="font-semibold">${quoteData.low.toFixed(2)} - ${quoteData.high.toFixed(2)}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Volume</p>
              <p className="font-semibold">{quoteData.volume.toLocaleString()}</p>
            </div>
          </div>
        </div>
        
        <div className="card">
          <h3 className="text-xl font-semibold mb-4">Price Chart</h3>
          <div className="h-64 flex items-center justify-center">
            <p>Chart would display here</p>
          </div>
        </div>
      </div>
      
      <div className="card">
        <h3 className="text-xl font-semibold mb-4">Value Analysis Summary</h3>
        <p className="mb-4">
          Get a detailed value investing analysis for {quoteData.symbol} by visiting our Value Analysis page.
        </p>
        <a href={`/value-analysis?symbol=${quoteData.symbol}`} className="btn btn-primary inline-block">
          View Value Analysis
        </a>
      </div>
    </div>
  );
}

===== FILE: frontend/src/components/results/ValuePageResults.jsx =====

'use client';

import { useState, useEffect } from 'react';

export default function ValuePageResults({ analysisData }) {
  const [chartData, setChartData] = useState(null);

  useEffect(() => {
    if (!analysisData) return;
    
    // Prepare data for chart display
    setChartData({
      labels: ['P/E Ratio', 'P/B Ratio', 'ROE', 'Value Score'],
      values: [
        analysisData.metrics.pe,
        analysisData.metrics.pb,
        analysisData.metrics.roe,
        analysisData.valueScore
      ]
    });
  }, [analysisData]);

  if (!analysisData) return null;

  const getBullishBearishClass = (score) => {
    if (score >= 7) return 'text-green-600 dark:text-green-400';
    if (score >= 4) return 'text-yellow-600 dark:text-yellow-400';
    return 'text-red-600 dark:text-red-400';
  };

  const getBullishBearishLabel = (score) => {
    if (score >= 7) return 'Bullish';
    if (score >= 4) return 'Neutral';
    return 'Bearish';
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">{analysisData.symbol} Value Analysis</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="card col-span-2">
          <h3 className="text-xl font-semibold mb-4">Value Assessment</h3>
          
          <div className="mb-6">
            <div className="flex justify-between items-center mb-2">
              <span className="text-gray-700 dark:text-gray-300">Value Score</span>
              <span className={`font-bold text-lg ${getBullishBearishClass(analysisData.valueScore)}`}>
                {analysisData.valueScore}/10
              </span>
            </div>
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
              <div 
                className={`h-2.5 rounded-full ${
                  analysisData.valueScore >= 7 ? 'bg-green-600' : 
                  analysisData.valueScore >= 4 ? 'bg-yellow-500' : 'bg-red-600'
                }`}
                style={{ width: `${analysisData.valueScore * 10}%` }}
              ></div>
            </div>
            <p className="mt-2 text-right text-sm text-gray-600 dark:text-gray-400">
              {getBullishBearishLabel(analysisData.valueScore)}
            </p>
          </div>
          
          <div className="mb-6">
            <div className="flex justify-between items-center mb-2">
              <span className="text-gray-700 dark:text-gray-300">Current Price</span>
              <span className="font-bold">${analysisData.currentPrice}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-700 dark:text-gray-300">Estimated Intrinsic Value</span>
              <span className="font-bold">${analysisData.intrinsicValue || 'N/A'}</span>
            </div>
            
            {analysisData.intrinsicValue && (
              <div className="mt-2">
                <p className={`text-sm ${
                  analysisData.currentPrice < analysisData.intrinsicValue * 0.9 ? 'text-green-600' :
                  analysisData.currentPrice > analysisData.intrinsicValue * 1.1 ? 'text-red-600' :
                  'text-yellow-600'
                }`}>
                  {analysisData.currentPrice < analysisData.intrinsicValue * 0.9 ? 
                    `Potentially undervalued by ${(100 * (1 - analysisData.currentPrice / analysisData.intrinsicValue)).toFixed(1)}%` :
                    analysisData.currentPrice > analysisData.intrinsicValue * 1.1 ?
                    `Potentially overvalued by ${(100 * (analysisData.currentPrice / analysisData.intrinsicValue - 1)).toFixed(1)}%` :
                    'Trading near intrinsic value'
                  }
                </p>
              </div>
            )}
          </div>
          
          <h4 className="font-semibold mb-2">Analysis:</h4>
          <p className="text-gray-700 dark:text-gray-300">
            {analysisData.analysis}
          </p>
        </div>
        
        <div className="card">
          <h3 className="text-xl font-semibold mb-4">Key Metrics</h3>
          
          <div className="space-y-4">
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Earnings Per Share (EPS)</p>
              <p className="font-semibold">${analysisData.metrics.eps}</p>
            </div>
            
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Book Value Per Share</p>
              <p className="font-semibold">${analysisData.metrics.bookValue}</p>
            </div>
            
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">P/E Ratio</p>
              <p className={`font-semibold ${
                analysisData.metrics.pe < 15 ? 'text-green-600 dark:text-green-400' :
                analysisData.metrics.pe < 25 ? 'text-yellow-600 dark:text-yellow-400' :
                'text-red-600 dark:text-red-400'
              }`}>
                {analysisData.metrics.pe.toFixed(2)}
              </p>
            </div>
            
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">P/B Ratio</p>
              <p className={`font-semibold ${
                analysisData.metrics.pb < 1.5 ? 'text-green-600 dark:text-green-400' :
                analysisData.metrics.pb < 3 ? 'text-yellow-600 dark:text-yellow-400' :
                'text-red-600 dark:text-red-400'
              }`}>
                {analysisData.metrics.pb.toFixed(2)}
              </p>
            </div>
            
            <div>
              <p className="text-sm text-gray-500 dark:text-gray-400">Return on Equity (ROE)</p>
              <p className={`font-semibold ${
                analysisData.metrics.roe > 15 ? 'text-green-600 dark:text-green-400' :
                analysisData.metrics.roe > 10 ? 'text-yellow-600 dark:text-yellow-400' :
                'text-red-600 dark:text-red-400'
              }`}>
                {(analysisData.metrics.roe * 100).toFixed(2)}%
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

===== FILE: frontend/src/contexts/EducationalContentContext.jsx =====

'use client';

import { createContext, useState, useContext, useEffect } from 'react';

// Create context
const EducationalContentContext = createContext();

// Custom hook for using the context
export const useEducationalContent = () => {
  const context = useContext(EducationalContentContext);
  if (!context) {
    throw new Error('useEducationalContent must be used within an EducationalContentProvider');
  }
  return context;
};

// Provider component
export const EducationalContentProvider = ({ children }) => {
  const [educationalContent, setEducationalContent] = useState({});
  const [contentMap, setContentMap] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Initialize content map
  useEffect(() => {
    setContentMap({
      'trading-fundamentals': 'trading-fundamentals.md',
      'trading-basics': 'trading-basics.md',
      'trading-intermediate': 'trading-intermediate.md',
      'bonds': 'bonds.md',
      'calculating-stock-value': 'calculating-stock-value.md',
    });
  }, []);

  // Get content by slug
  const getContent = async (slug) => {
    if (educationalContent[slug]) {
      return educationalContent[slug];
    }

    setLoading(true);
    setError(null);

    try {
      // Make API request to fetch content
      const url = `${process.env.NEXT_PUBLIC_API_URL}/educational-content/${slug}`;
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch content: ${response.statusText}`);
      }
      
      const content = await response.text();
      
      // Update state
      setEducationalContent(prev => ({
        ...prev,
        [slug]: content
      }));
      
      setLoading(false);
      return content;
    } catch (error) {
      console.error(`Error fetching educational content for ${slug}:`, error);
      setError(`Failed to fetch content for ${slug}`);
      setLoading(false);
      return null;
    }
  };

  // Get content list
  const getContentList = async () => {
    setLoading(true);
    setError(null);

    try {
      // Make API request to fetch content list
      const url = `${process.env.NEXT_PUBLIC_API_URL}/educational-content`;
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch content list: ${response.statusText}`);
      }
      
      const contentList = await response.json();
      
      setLoading(false);
      return contentList;
    } catch (error) {
      console.error('Error fetching educational content list:', error);
      setError('Failed to fetch content list');
      setLoading(false);
      return [];
    }
  };

  // Context value
  const value = {
    educationalContent,
    loading,
    error,
    getContent,
    getContentList,
    contentMap,
  };

  return (
    <EducationalContentContext.Provider value={value}>
      {children}
    </EducationalContentContext.Provider>
  );
};

export default EducationalContentContext;

===== FILE: frontend/src/contexts/StockDataContext.jsx =====

'use client';

import { createContext, useState, useContext } from 'react';

// Create context
const StockDataContext = createContext();

// Custom hook for using the context
export const useStockData = () => {
  const context = useContext(StockDataContext);
  if (!context) {
    throw new Error('useStockData must be used within a StockDataProvider');
  }
  return context;
};

// Provider component
export const StockDataProvider = ({ children }) => {
  const [stockData, setStockData] = useState(null);
  const [quote, setQuote] = useState(null);
  const [companyOverview, setCompanyOverview] = useState(null);
  const [financials, setFinancials] = useState({
    income: null,
    balance: null,
    cashflow: null,
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Reset all data
  const resetData = () => {
    setStockData(null);
    setQuote(null);
    setCompanyOverview(null);
    setFinancials({
      income: null,
      balance: null,
      cashflow: null,
    });
    setError(null);
  };

  // Set basic stock data
  const setStock = (data) => {
    setStockData(data);
  };

  // Update quote data
  const updateQuote = (data) => {
    setQuote(data);
  };

  // Update company overview
  const updateCompanyOverview = (data) => {
    setCompanyOverview(data);
  };

  // Update financial statements
  const updateFinancials = (type, data) => {
    setFinancials(prev => ({
      ...prev,
      [type]: data
    }));
  };

  // Set loading state
  const setLoadingState = (isLoading) => {
    setLoading(isLoading);
  };

  // Set error state
  const setErrorState = (errorMessage) => {
    setError(errorMessage);
  };

  // Context value
  const value = {
    stockData,
    quote,
    companyOverview,
    financials,
    loading,
    error,
    setStock,
    updateQuote,
    updateCompanyOverview,
    updateFinancials,
    setLoadingState,
    setErrorState,
    resetData,
  };

  return (
    <StockDataContext.Provider value={value}>
      {children}
    </StockDataContext.Provider>
  );
};

export default StockDataContext;

===== FILE: frontend/src/lib/api/financeApi.js =====


/**
 * Finance API client for making requests to the backend
 */
import axios from 'axios';

// Create axios instance with default config
const apiClient = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/api',
  timeout: 15000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add request interceptor for logging, authentication, etc.
apiClient.interceptors.request.use(
  (config) => {
    // You could add auth tokens here if needed
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Add response interceptor for handling common errors
apiClient.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    const { response } = error;
    
    // Handle API rate limits, authentication issues, etc.
    if (response && response.status === 429) {
      console.error('API rate limit exceeded');
    } else if (response && response.status === 401) {
      console.error('Authentication error');
    } else if (!response) {
      console.error('Network error - please check your connection');
    }
    
    return Promise.reject(error);
  }
);

/**
 * Get enhanced value investing analysis
 */
export const getEnhancedValueAnalysis = async (symbol) => {
  try {
    const response = await apiClient.get(`/finance/enhanced-analysis/${symbol}`);
    return response.data;
  } catch (error) {
    console.error(`Error performing enhanced analysis for ${symbol}:`, error);
    throw error;
  }
};

/**
 * Search for companies by symbol or name
 */
export const searchCompany = async (query) => {
  try {
    const response = await apiClient.get('/finance/search', {
      params: { query }
    });
    return response.data;
  } catch (error) {
    console.error('Error searching for company:', error);
    throw error;
  }
};

/**
 * Get current stock quote
 */
export const getQuote = async (symbol) => {
  try {
    const response = await apiClient.get(`/finance/quote/${symbol}`);
    return response.data;
  } catch (error) {
    console.error(`Error fetching quote for ${symbol}:`, error);
    throw error;
  }
};

/**
 * Get company overview
 */
export const getCompanyOverview = async (symbol) => {
  try {
    const response = await apiClient.get(`/finance/overview/${symbol}`);
    return response.data;
  } catch (error) {
    console.error(`Error fetching overview for ${symbol}:`, error);
    throw error;
  }
};

/**
 * Get historical price data
 */
export const getHistoricalData = async (symbol, period, range) => {
  try {
    const response = await apiClient.get(`/finance/historical/${symbol}`, {
      params: { period, range }
    });
    return response.data;
  } catch (error) {
    console.error(`Error fetching historical data for ${symbol}:`, error);
    throw error;
  }
};

/**
 * Get financial statements
 */
export const getFinancials = async (symbol, type = 'income') => {
  try {
    const response = await apiClient.get(`/finance/financials/${symbol}`, {
      params: { type }
    });
    return response.data;
  } catch (error) {
    console.error(`Error fetching ${type} statement for ${symbol}:`, error);
    throw error;
  }
};

/**
 * Get value investing analysis
 */
export const getValueAnalysis = async (symbol) => {
  try {
    const response = await apiClient.get(`/finance/value-analysis/${symbol}`);
    return response.data;
  } catch (error) {
    console.error(`Error performing value analysis for ${symbol}:`, error);
    throw error;
  }
};

/**
 * Get educational content
 */
export const getEducationalContent = async (slug) => {
  try {
    const response = await apiClient.get(`/educational-content/${slug}`);
    return response.data;
  } catch (error) {
    console.error(`Error fetching educational content for ${slug}:`, error);
    throw error;
  }
};

/**
 * Get educational content list
 */
export const getEducationalContentList = async () => {
  try {
    const response = await apiClient.get('/educational-content');
    return response.data;
  } catch (error) {
    console.error('Error fetching educational content list:', error);
    throw error;
  }
};

export default {
  searchCompany,
  getQuote,
  getCompanyOverview,
  getHistoricalData,
  getFinancials,
  getValueAnalysis,
  getEnhancedValueAnalysis,  
  getEducationalContent,
  getEducationalContentList
};

===== FILE: frontend/src/lib/finance/scoreCalculator.js =====

// frontend/src/lib/finance/scoreCalculator.js

/**
 * Calculate a bullish/bearish score (1-10) based on financial metrics and news sentiment
 * 
 * This combines value investing principles with sentiment analysis to provide
 * an overall score where:
 * - 7-10: Bullish (Buy)
 * - 4-6: Neutral (Hold)
 * - 1-3: Bearish (Sell)
 */

/**
 * Calculate a comprehensive stock score combining value metrics and news sentiment
 * @param {Object} metrics - Financial metrics
 * @param {number} metrics.pe - Price to Earnings ratio
 * @param {number} metrics.pb - Price to Book ratio
 * @param {number} metrics.roe - Return on Equity (as decimal)
 * @param {number} metrics.debtToEquity - Debt to Equity ratio
 * @param {number} metrics.currentPrice - Current stock price
 * @param {number} metrics.intrinsicValue - Estimated intrinsic value
 * @param {number} newsSentiment - News sentiment score (1-10)
 * @returns {number} Overall bullish/bearish score (1-10)
 */
export const calculateOverallScore = (metrics, newsSentiment = 5) => {
    // Calculate value metrics score
    const valueScore = calculateValueScore(
      metrics.pe,
      metrics.pb,
      metrics.roe,
      metrics.debtToEquity,
      metrics.currentPrice,
      metrics.intrinsicValue
    );
    
    // Weight distribution (adjust as needed)
    const valueWeight = 0.7;  // Value metrics: 70%
    const newsWeight = 0.3;   // News sentiment: 30%
    
    // Calculate weighted score
    const weightedScore = (valueScore * valueWeight) + (newsSentiment * newsWeight);
    
    // Ensure score is between 1-10 and rounded to nearest decimal
    return Math.min(Math.max(Number(weightedScore.toFixed(1)), 1), 10);
  };
  
  /**
   * Calculate a value score based on Warren Buffett's principles
   * @param {number} pe - Price to Earnings ratio
   * @param {number} pb - Price to Book ratio
   * @param {number} roe - Return on Equity (as decimal)
   * @param {number} debtToEquity - Debt to Equity ratio
   * @param {number} currentPrice - Current stock price
   * @param {number} intrinsicValue - Estimated intrinsic value
   * @returns {number} Value score (1-10)
   */
  export const calculateValueScore = (pe, pb, roe, debtToEquity, currentPrice, intrinsicValue) => {
    // Initialize component scores
    let peScore = 0;
    let pbScore = 0;
    let roeScore = 0;
    let debtScore = 0;
    let valueGapScore = 0;
    
    // PE ratio scoring (lower is better for value investing)
    if (!pe || pe <= 0) {
      peScore = 0; // Negative earnings
    } else if (pe < 10) {
      peScore = 4; // Excellent PE
    } else if (pe < 15) {
      peScore = 3; // Good PE
    } else if (pe < 20) {
      peScore = 2; // Average PE
    } else if (pe < 25) {
      peScore = 1; // Below average PE
    } else {
      peScore = 0; // Poor PE
    }
    
    // P/B ratio scoring (lower is better for value investing)
    if (!pb || pb <= 0) {
      pbScore = 0; // Invalid book value
    } else if (pb < 1) {
      pbScore = 4; // Excellent P/B
    } else if (pb < 2) {
      pbScore = 3; // Good P/B
    } else if (pb < 3) {
      pbScore = 2; // Average P/B
    } else if (pb < 4) {
      pbScore = 1; // Below average P/B
    } else {
      pbScore = 0; // Poor P/B
    }
    
    // ROE scoring (higher is better)
    if (!roe || roe <= 0) {
      roeScore = 0; // Negative ROE
    } else if (roe > 0.20) {
      roeScore = 2; // Excellent ROE
    } else if (roe > 0.15) {
      roeScore = 1.5; // Good ROE
    } else if (roe > 0.10) {
      roeScore = 1; // Average ROE
    } else {
      roeScore = 0.5; // Below average ROE
    }
    
    // Debt-to-Equity scoring (lower is better)
    if (!debtToEquity && debtToEquity !== 0) {
      debtScore = 0; // Missing data
    } else if (debtToEquity < 0.3) {
      debtScore = 2; // Excellent debt level
    } else if (debtToEquity < 0.5) {
      debtScore = 1.5; // Good debt level
    } else if (debtToEquity < 1) {
      debtScore = 1; // Average debt level
    } else if (debtToEquity < 2) {
      debtScore = 0.5; // High debt level
    } else {
      debtScore = 0; // Very high debt level
    }
    
    // Price vs. Intrinsic Value scoring
    if (currentPrice && intrinsicValue && intrinsicValue > 0) {
      const valueRatio = currentPrice / intrinsicValue;
      
      if (valueRatio < 0.7) {
        valueGapScore = 2; // Significantly undervalued
      } else if (valueRatio < 0.9) {
        valueGapScore = 1.5; // Moderately undervalued
      } else if (valueRatio < 1.1) {
        valueGapScore = 1; // Fair value
      } else if (valueRatio < 1.3) {
        valueGapScore = 0.5; // Moderately overvalued
      } else {
        valueGapScore = 0; // Significantly overvalued
      }
    }
    
    // Calculate total score (sum of components)
    const totalScore = peScore + pbScore + roeScore + debtScore + valueGapScore;
    
    // Scale to 1-10 (max possible score is 14, min is 0)
    return Math.min(Math.max(Math.round((totalScore / 14) * 10), 1), 10);
  };
  
  /**
   * Calculate a news sentiment score based on positive/negative mentions
   * @param {Array} newsItems - Array of news items with sentiment data
   * @returns {number} News sentiment score (1-10)
   */
  export const calculateNewsSentiment = (newsItems) => {
    // This would typically connect to a sentiment analysis API
    // For a placeholder, we'll return a mock value
    return 5; // Neutral sentiment
  };
  
  /**
   * Generate analysis text based on the overall score and metrics
   * @param {number} overallScore - Overall bullish/bearish score (1-10)
   * @param {Object} metrics - Financial metrics
   * @returns {string} Analysis text explaining the score
   */
  export const generateAnalysisText = (overallScore, metrics) => {
    let analysis = "";
    
    // Interpret overall score
    if (overallScore >= 8) {
      analysis += "Strong bullish signal. This stock shows excellent value characteristics and positive sentiment. ";
    } else if (overallScore >= 6.5) {
      analysis += "Moderately bullish. The stock displays good value metrics and generally positive sentiment. ";
    } else if (overallScore >= 5) {
      analysis += "Neutral outlook. The stock shows mixed value indicators and sentiment. ";
    } else if (overallScore >= 3.5) {
      analysis += "Moderately bearish. The stock may be overvalued or has concerning metrics. ";
    } else {
      analysis += "Strong bearish signal. The stock appears significantly overvalued or has poor fundamental metrics. ";
    }
    
    // Add value gap analysis
    if (metrics.currentPrice && metrics.intrinsicValue) {
      const valueGap = (metrics.intrinsicValue - metrics.currentPrice) / metrics.currentPrice * 100;
      
      if (valueGap > 30) {
        analysis += `The current price is significantly below our estimated intrinsic value (${valueGap.toFixed(0)}% discount), suggesting potential for appreciation. `;
      } else if (valueGap > 10) {
        analysis += `The current price is below our estimated intrinsic value (${valueGap.toFixed(0)}% discount), suggesting the stock may be undervalued. `;
      } else if (valueGap > -10) {
        analysis += "The stock is trading close to our estimated intrinsic value, suggesting fair pricing. ";
      } else if (valueGap > -30) {
        analysis += `The current price is above our estimated intrinsic value (${Math.abs(valueGap).toFixed(0)}% premium), suggesting the stock may be overvalued. `;
      } else {
        analysis += `The current price is significantly above our estimated intrinsic value (${Math.abs(valueGap).toFixed(0)}% premium), suggesting caution. `;
      }
    }
    
    // Highlight key metrics
    const metricAnalysis = [];
    
    if (metrics.pe) {
      if (metrics.pe < 15) {
        metricAnalysis.push("favorable P/E ratio");
      } else if (metrics.pe > 25) {
        metricAnalysis.push("high P/E ratio");
      }
    }
    
    if (metrics.roe) {
      if (metrics.roe > 0.15) {
        metricAnalysis.push("strong return on equity");
      } else if (metrics.roe < 0.1) {
        metricAnalysis.push("weak return on equity");
      }
    }
    
    if (metrics.debtToEquity) {
      if (metrics.debtToEquity < 0.5) {
        metricAnalysis.push("low debt levels");
      } else if (metrics.debtToEquity > 1) {
        metricAnalysis.push("high debt levels");
      }
    }
    
    if (metricAnalysis.length > 0) {
      analysis += `Key factors in this assessment include ${metricAnalysis.join(", ")}.`;
    }
    
    return analysis;
  };
  
  export default {
    calculateOverallScore,
    calculateValueScore,
    calculateNewsSentiment,
    generateAnalysisText
  };

===== FILE: frontend/src/lib/finance/valuecalculator.js =====

/**
 * Finance utility functions for value investing calculations
 */

/**
 * Calculate Price-to-Earnings (P/E) ratio
 * @param {number} price - Current stock price
 * @param {number} eps - Earnings per share
 * @returns {number} P/E ratio
 */
export const calculatePE = (price, eps) => {
    if (!price || !eps || eps <= 0) return null;
    return price / eps;
  };
  
  /**
   * Calculate Price-to-Book (P/B) ratio
   * @param {number} price - Current stock price
   * @param {number} bookValue - Book value per share
   * @returns {number} P/B ratio
   */
  export const calculatePB = (price, bookValue) => {
    if (!price || !bookValue || bookValue <= 0) return null;
    return price / bookValue;
  };
  
  /**
   * Calculate Return on Equity (ROE)
   * @param {number} netIncome - Net income
   * @param {number} shareholderEquity - Shareholder equity
   * @returns {number} ROE as a decimal (e.g., 0.15 for 15%)
   */
  export const calculateROE = (netIncome, shareholderEquity) => {
    if (!netIncome || !shareholderEquity || shareholderEquity <= 0) return null;
    return netIncome / shareholderEquity;
  };
  
  /**
   * Calculate Debt-to-Equity ratio
   * @param {number} totalDebt - Total debt
   * @param {number} shareholderEquity - Shareholder equity
   * @returns {number} Debt-to-Equity ratio
   */
  export const calculateDebtToEquity = (totalDebt, shareholderEquity) => {
    if (!totalDebt || !shareholderEquity || shareholderEquity <= 0) return null;
    return totalDebt / shareholderEquity;
  };
  
  /**
   * Calculate intrinsic value using the Graham formula
   * @param {number} eps - Earnings per share
   * @param {number} growthRate - Expected growth rate (decimal)
   * @returns {number} Intrinsic value
   */
  export const calculateGrahamValue = (eps, growthRate) => {
    if (!eps || eps <= 0 || growthRate === undefined) return null;
    return eps * (8.5 + 2 * (growthRate * 100));
  };
  
  /**
   * Calculate intrinsic value using Discounted Cash Flow (DCF)
   * @param {number} freeCashFlow - Free cash flow per share
   * @param {number} growthRate - Expected growth rate (decimal)
   * @param {number} discountRate - Discount rate (decimal)
   * @param {number} terminalGrowthRate - Terminal growth rate (decimal)
   * @param {number} years - Number of years to project
   * @returns {number} Intrinsic value
   */
  export const calculateDCF = (
    freeCashFlow,
    growthRate,
    discountRate,
    terminalGrowthRate,
    years = 10
  ) => {
    if (!freeCashFlow || freeCashFlow <= 0 || !growthRate || !discountRate) return null;
    
    let presentValue = 0;
    
    // Calculate the present value of future cash flows
    for (let i = 1; i <= years; i++) {
      const cashFlow = freeCashFlow * Math.pow(1 + growthRate, i);
      presentValue += cashFlow / Math.pow(1 + discountRate, i);
    }
    
    // Calculate terminal value
    const terminalValue = (freeCashFlow * Math.pow(1 + growthRate, years) * (1 + terminalGrowthRate)) / 
                          (discountRate - terminalGrowthRate);
    
    // Calculate the present value of the terminal value
    const presentTerminalValue = terminalValue / Math.pow(1 + discountRate, years);
    
    // Total intrinsic value is the sum of the present value of cash flows and terminal value
    return presentValue + presentTerminalValue;
  };
  
  /**
   * Calculate value score (from 1-10) based on Warren Buffett's principles
   * @param {number} pe - Price-to-Earnings ratio
   * @param {number} pb - Price-to-Book ratio
   * @param {number} roe - Return on Equity (decimal)
   * @param {number} debtToEquity - Debt-to-Equity ratio
   * @returns {number} Value score from 1-10
   */
  export const calculateValueScore = (pe, pb, roe, debtToEquity) => {
    // Initialize score components
    let peScore = 0;
    let pbScore = 0;
    let roeScore = 0;
    let debtScore = 0;
    
    // PE ratio scoring (lower is better for value investing)
    if (!pe || pe <= 0) {
      peScore = 0; // Negative earnings
    } else if (pe < 10) {
      peScore = 4; // Excellent PE
    } else if (pe < 15) {
      peScore = 3; // Good PE
    } else if (pe < 20) {
      peScore = 2; // Average PE
    } else if (pe < 25) {
      peScore = 1; // Below average PE
    } else {
      peScore = 0; // Poor PE
    }
    
    // P/B ratio scoring (lower is better for value investing)
    if (!pb || pb <= 0) {
      pbScore = 0; // Invalid book value
    } else if (pb < 1) {
      pbScore = 4; // Excellent P/B
    } else if (pb < 2) {
      pbScore = 3; // Good P/B
    } else if (pb < 3) {
      pbScore = 2; // Average P/B
    } else if (pb < 4) {
      pbScore = 1; // Below average P/B
    } else {
      pbScore = 0; // Poor P/B
    }
    
    // ROE scoring (higher is better)
    if (!roe || roe <= 0) {
      roeScore = 0; // Negative ROE
    } else if (roe > 0.20) {
      roeScore = 2; // Excellent ROE
    } else if (roe > 0.15) {
      roeScore = 1.5; // Good ROE
    } else if (roe > 0.10) {
      roeScore = 1; // Average ROE
    } else {
      roeScore = 0.5; // Below average ROE
    }
    
    // Debt-to-Equity scoring (lower is better)
    if (!debtToEquity && debtToEquity !== 0) {
      debtScore = 0; // Missing data
    } else if (debtToEquity < 0.3) {
      debtScore = 2; // Excellent debt level
    } else if (debtToEquity < 0.5) {
      debtScore = 1.5; // Good debt level
    } else if (debtToEquity < 1) {
      debtScore = 1; // Average debt level
    } else if (debtToEquity < 2) {
      debtScore = 0.5; // High debt level
    } else {
      debtScore = 0; // Very high debt level
    }
    
    // Calculate total score (0-10 scale)
    const totalScore = peScore + pbScore + roeScore + debtScore;
    
    // Scale to 1-10 and round to nearest integer
    return Math.min(Math.max(Math.round(totalScore * 10 / 10), 1), 10);
  };
  
  /**
   * Generate analysis text based on metrics
   * @param {number} valueScore - Value score (1-10)
   * @param {number} currentPrice - Current stock price
   * @param {number} intrinsicValue - Estimated intrinsic value
   * @param {number} pe - Price-to-Earnings ratio
   * @param {number} pb - Price-to-Book ratio
   * @param {number} roe - Return on Equity (decimal)
   * @param {number} debtToEquity - Debt-to-Equity ratio
   * @returns {string} Analysis text
   */
  export const generateAnalysis = (
    valueScore,
    currentPrice,
    intrinsicValue,
    pe,
    pb,
    roe,
    debtToEquity
  ) => {
    let analysis = "";
    
    // Interpret value score
    if (valueScore >= 8) {
      analysis += "Strong value opportunity. ";
    } else if (valueScore >= 6) {
      analysis += "Moderate value opportunity. ";
    } else if (valueScore >= 4) {
      analysis += "Fair value. ";
    } else {
      analysis += "Weak value proposition. ";
    }
    
    // Add price vs intrinsic value analysis
    if (intrinsicValue && currentPrice < intrinsicValue * 0.8) {
      analysis += `Trading significantly below estimated intrinsic value ($${intrinsicValue.toFixed(2)}). `;
    } else if (intrinsicValue && currentPrice < intrinsicValue) {
      analysis += `Trading below estimated intrinsic value ($${intrinsicValue.toFixed(2)}). `;
    } else if (intrinsicValue && currentPrice < intrinsicValue * 1.2) {
      analysis += `Trading near estimated intrinsic value ($${intrinsicValue.toFixed(2)}). `;
    } else if (intrinsicValue) {
      analysis += `Trading above estimated intrinsic value ($${intrinsicValue.toFixed(2)}). `;
    }
    
    // Add PE analysis
    if (!pe || pe <= 0) {
      analysis += "Negative earnings. ";
    } else if (pe < 10) {
      analysis += "PE ratio indicates potential undervaluation. ";
    } else if (pe > 25) {
      analysis += "PE ratio indicates potential overvaluation. ";
    } else {
      analysis += "PE ratio is within reasonable range. ";
    }
    
    // Add Debt analysis
    if (debtToEquity !== undefined) {
      if (debtToEquity < 0.5) {
        analysis += "Debt levels are conservative, which Warren Buffett prefers. ";
      } else if (debtToEquity < 1) {
        analysis += "Debt levels are moderate. ";
      } else {
        analysis += "Debt levels are relatively high, which increases risk. ";
      }
    }
    
    // Add ROE analysis
    if (!roe || roe <= 0) {
      analysis += "Negative return on equity is concerning.";
    } else if (roe > 0.15) {
      analysis += "Strong return on equity indicates effective management.";
    } else if (roe > 0.10) {
      analysis += "Decent return on equity.";
    } else {
      analysis += "Below-average return on equity.";
    }
    
    return analysis;
  };
  
  export default {
    calculatePE,
    calculatePB,
    calculateROE,
    calculateDebtToEquity,
    calculateGrahamValue,
    calculateDCF,
    calculateValueScore,
    generateAnalysis
  };

===== FILE: frontend/src/lib/learn/contentService.js =====

// frontend/src/lib/learn/contentService.js

// This service handles fetching and organizing educational content

// Mock data for beginner level articles
const beginnerArticles = [
    {
      slug: 'value-investing-basics',
      title: 'What is Value Investing?',
      description: 'Learn the fundamentals of value investing and how it differs from other strategies.',
      order: 1,
      imagePath: '/images/learn/value-investing.jpg',
    },
    {
      slug: 'valuing-small-business',
      title: 'Valuing a Small Business',
      description: 'Understand how to evaluate the worth of a small business using fundamental principles.',
      order: 2,
      imagePath: '/images/learn/small-business.jpg',
    },
    {
      slug: 'balance-sheet-margin-safety',
      title: 'Balance Sheet & Margin of Safety',
      description: 'Learn how to read a balance sheet and understand the concept of margin of safety.',
      order: 3,
      imagePath: '/images/learn/balance-sheet.jpg',
    },
    {
      slug: 'what-is-share',
      title: 'What is a Share?',
      description: 'Understand shares, shares outstanding, and basic valuation techniques for shares.',
      order: 4,
      imagePath: '/images/learn/stock-share.jpg',
    },
    {
      slug: 'buffett-stock-basics',
      title: 'Warren Buffett Stock Basics',
      description: 'Learn Warren Buffett\'s four rules for buying stocks and his basic valuation techniques.',
      order: 5,
      imagePath: '/images/learn/buffett.jpg',
    },
    {
      slug: 'what-is-bond',
      title: 'What is a Bond?',
      description: 'Understand the fundamentals of bonds and why they are important for investors.',
      order: 6,
      imagePath: '/images/learn/bonds.jpg',
    },
    {
      slug: 'bond-components',
      title: 'Components of a Bond',
      description: 'Learn about par value, coupon rate, term, and market value of bonds.',
      order: 7,
      imagePath: '/images/learn/bond-components.jpg',
    },
    {
      slug: 'bond-valuation-yield',
      title: 'Bond Valuation & Yield to Maturity',
      description: 'Understand how to value bonds and calculate yield to maturity.',
      order: 8,
      imagePath: '/images/learn/bond-yield.jpg',
    },
    {
      slug: 'stock-market-basics',
      title: 'What is the Stock Market?',
      description: 'Learn the basics of how the stock market functions and Benjamin Graham\'s Mr. Market.',
      order: 9,
      imagePath: '/images/learn/stock-market.jpg',
    },
    {
      slug: 'market-crashes-bubbles',
      title: 'Stock Market Crashes & Bubbles',
      description: 'Understand market psychology, fear and greed cycles, and how to navigate them.',
      order: 10,
      imagePath: '/images/learn/market-crash.jpg',
    },
    {
      slug: 'fed-explained',
      title: 'What is the Fed?',
      description: 'Learn about the Federal Reserve, its mission, and how it influences markets.',
      order: 11,
      imagePath: '/images/learn/federal-reserve.jpg',
    },
    {
      slug: 'reading-financial-statements',
      title: 'Reading Financial Statements',
      description: 'Learn how to read and interpret income statements, balance sheets, and cash flow statements.',
      order: 12,
      imagePath: '/images/learn/financial-statements.jpg',
    },
    {
      slug: 'intrinsic-value-calculation',
      title: 'Calculating Intrinsic Value',
      description: 'Understand the concept of intrinsic value and learn basic calculation methods.',
      order: 13,
      imagePath: '/images/learn/intrinsic-value.jpg',
    },
  ];
  
  // Mock data for intermediate level articles
  const intermediateArticles = [
    {
      slug: 'discounted-cash-flow',
      title: 'Discounted Cash Flow Analysis',
      description: 'Learn advanced methods for calculating the intrinsic value of a business.',
      order: 1,
      imagePath: '/images/learn/dcf.jpg',
    },
    // Additional intermediate articles would go here
  ];
  
  // Mock data for advanced level articles
  const advancedArticles = [
    {
      slug: 'special-situations',
      title: 'Special Situations Investing',
      description: 'Learn about arbitrage, spin-offs, and other special investment situations.',
      order: 1,
      imagePath: '/images/learn/special-situations.jpg',
    },
    // Additional advanced articles would go here
  ];
  
  /**
   * Get article content by level and slug
   * @param {string} level - beginner, intermediate, or advanced
   * @param {string} slug - article slug
   * @returns {Promise<Object>} - article content and metadata
   */
  export const getArticleContent = async (level, slug) => {
    try {
      // In a real implementation, this would fetch from an API
      // For now, we're using a mock implementation
      
      // Simulating network delay
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // In production, this would be an API fetch
      const response = await fetch(`/api/educational-content/${level}/${slug}`)
        .catch(() => {
          // Fall back to static content if API is not available
          return { ok: false };
        });
      
      // If we got a valid response from the API, use it
      if (response && response.ok) {
        const content = await response.text();
        return {
          content,
          metadata: getArticleMetadata(level, slug)
        };
      }
      
      // Otherwise, return mock content (for development)
      // In a real app, you'd load this from a file or database
      return {
        content: `# ${getArticleTitle(level, slug)}\n\nThis is placeholder content for ${slug}. In a real application, this would load the actual markdown content.`,
        metadata: getArticleMetadata(level, slug)
      };
    } catch (error) {
      console.error(`Error fetching content for ${level}/${slug}:`, error);
      throw new Error(`Failed to fetch content for ${slug}`);
    }
  };
  
  /**
   * Get article metadata by level and slug
   * @param {string} level - beginner, intermediate, or advanced
   * @param {string} slug - article slug
   * @returns {Object} - article metadata
   */
  export const getArticleMetadata = (level, slug) => {
    const articles = getArticlesByLevel(level);
    const article = articles.find(a => a.slug === slug);
    
    if (!article) {
      return {
        title: 'Article Not Found',
        description: 'The requested article could not be found.',
        imagePath: '/images/learn/default.jpg',
      };
    }
    
    return article;
  };
  
  /**
   * Get article title by level and slug
   * @param {string} level - beginner, intermediate, or advanced
   * @param {string} slug - article slug
   * @returns {string} - article title
   */
  export const getArticleTitle = (level, slug) => {
    const metadata = getArticleMetadata(level, slug);
    return metadata.title || 'Article Not Found';
  };
  
  /**
   * Get all articles for a specific level
   * @param {string} level - beginner, intermediate, or advanced
   * @returns {Array} - array of article objects
   */
  export const getArticlesByLevel = (level) => {
    switch (level) {
      case 'beginner':
        return beginnerArticles;
      case 'intermediate':
        return intermediateArticles;
      case 'advanced':
        return advancedArticles;
      default:
        return [];
    }
  };
  
  /**
   * Get related articles for a specific article
   * @param {string} level - beginner, intermediate, or advanced
   * @param {string} currentSlug - current article slug
   * @returns {Promise<Array>} - array of related article objects
   */
  export const getRelatedArticles = async (level, currentSlug) => {
    try {
      // Simulating network delay
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // Get all articles for the level
      const allArticles = getArticlesByLevel(level);
      
      // Sort by order
      const sortedArticles = [...allArticles].sort((a, b) => a.order - b.order);
      
      // Return all articles (including current one, which can be filtered out if needed)
      return sortedArticles;
    } catch (error) {
      console.error(`Error fetching related articles for ${level}/${currentSlug}:`, error);
      return [];
    }
  };
  
  /**
   * Get next and previous articles for navigation
   * @param {string} level - beginner, intermediate, or advanced
   * @param {string} currentSlug - current article slug
   * @returns {Promise<Object>} - object with next and previous articles
   */
  export const getNavigationArticles = async (level, currentSlug) => {
    try {
      const allArticles = await getRelatedArticles(level, currentSlug);
      
      // Find the current article index
      const currentIndex = allArticles.findIndex(article => article.slug === currentSlug);
      
      if (currentIndex === -1) {
        return { prev: null, next: null };
      }
      
      // Get previous and next articles
      const prev = currentIndex > 0 ? allArticles[currentIndex - 1] : null;
      const next = currentIndex < allArticles.length - 1 ? allArticles[currentIndex + 1] : null;
      
      return { prev, next };
    } catch (error) {
      console.error(`Error fetching navigation for ${level}/${currentSlug}:`, error);
      return { prev: null, next: null };
    }
  };
  
  export default {
    getArticleContent,
    getArticleMetadata,
    getArticleTitle,
    getArticlesByLevel,
    getRelatedArticles,
    getNavigationArticles
  };

===== FILE: frontend/tailwind.config.js =====

/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./src/**/*.{js,ts,jsx,tsx,mdx}",  // Scan all files in src
    ],
    darkMode: 'class', // Enable dark mode with class strategy
    theme: {
      extend: {
        colors: {
          primary: {
            50: '#f0f9ff',
            100: '#e0f2fe',
            200: '#bae6fd',
            300: '#7dd3fc',
            400: '#38bdf8',
            500: '#0ea5e9',
            600: '#0284c7',
            700: '#0369a1',
            800: '#075985',
            900: '#0c4a6e',
            950: '#082f49',
          },
          secondary: {
            50: '#f0fdfa',
            100: '#ccfbf1',
            200: '#99f6e4',
            300: '#5eead4',
            400: '#2dd4bf',
            500: '#14b8a6',
            600: '#0d9488',
            700: '#0f766e',
            800: '#115e59',
            900: '#134e4a',
            950: '#042f2e',
          },
        },
        fontFamily: {
          sans: ['Inter var', 'ui-sans-serif', 'system-ui', 'sans-serif'],
        },
      },
    },
    plugins: [],
  };

===== FILE: project_files.txt =====



===== FILE: README.md =====

# Elastic Finance

A finance website built with Next.js, Tailwind CSS, and the Yahoo Finance API to help analyze investment opportunities according to value investing principles.

## Features

- **Educational Content**: Learn about value investing principles based on Warren Buffett's strategies
- **Stock Analysis**: Track and analyze stocks using fundamental metrics
- **Financial Data Visualization**: Interactive charts to visualize stock performance and financial metrics
- **Value Investing Scores**: Get a bullish/bearish rating (1-10) based on value investing principles
- **Dark Mode**: Toggle between light and dark themes for comfortable viewing

## Tech Stack

- **Frontend**: Next.js, Tailwind CSS, React
- **Backend**: Node.js, Express
- **Data Visualization**: Chart.js for financial charts
- **API Integration**: Yahoo Finance API (via yahoo-finance2)
- **Containerization**: Docker and Docker Compose

## Getting Started

### Prerequisites

- Docker and Docker Compose
- Node.js and npm (for local development)

### Environment Setup

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/elastic-finance.git
   cd elastic-finance
   ```

2. Create environment files:
   ```bash
   # Backend .env
   echo "PORT=4000
   NODE_ENV=production
   CACHE_TTL=900
   CORS_ORIGIN=http://localhost:3000" > backend/.env

   # Frontend .env
   echo "NEXT_PUBLIC_API_URL=http://localhost:4000/api" > frontend/.env
   ```

3. Start the application with Docker Compose:
   ```bash
   docker-compose up
   ```

4. Access the application:
   - Frontend: http://localhost:3000
   - Backend API: http://localhost:4000

## Development

### Running in Development Mode (without Docker)

```bash
# Start backend
cd backend
npm install
npm run dev

# Start frontend (in another terminal)
cd frontend
npm install
npm run dev
```

## Using the Yahoo Finance API

The project uses the `yahoo-finance2` npm package, which doesn't require an API key. It works by making request to Yahoo Finance's public endpoints.

Benefits of using yahoo-finance2:
- No API key required
- No rate limiting concerns (though we still implement caching for performance)
- Provides comprehensive financial data

## Educational Content

The educational section provides comprehensive guides on:

- Trading Fundamentals
- Value Investing Principles
- Bond Analysis
- Financial Ratio Analysis
- Stock Valuation Techniques

## Project Structure

```
elastic-finance/
├── backend/              # Express server
│   ├── src/
│   │   ├── config/       # Configuration files
│   │   ├── controllers/  # Route controllers
│   │   ├── middleware/   # Express middleware
│   │   ├── routes/       # API routes
│   │   ├── services/     # Business logic
│   │   └── index.js      # Entry point
├── frontend/             # Next.js application
│   ├── src/
│   │   ├── app/          # Next.js App Router
│   │   ├── components/   # React components
│   │   ├── contexts/     # React contexts
│   │   ├── hooks/        # Custom React hooks
│   │   └── lib/          # Utility functions
├── docs/                 # Educational markdown files
└── docker-compose.yml    # Docker configuration
```

## License

This project is licensed under the MIT License - see the LICENSE file for details.